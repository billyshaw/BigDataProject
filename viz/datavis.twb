<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8300.14.1117.2230                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource caption='new_trip_data_1_5' inline='true' name='textscan.41980.593389085647' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='new_trip_data_1_5.csv'>
        <relation name='new_trip_data_1_5#csv' table='[new_trip_data_1_5#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='medallion' ordinal='0' />
            <column datatype='string' name='hack_license' ordinal='1' />
            <column datatype='string' name='vendor_id' ordinal='2' />
            <column datatype='integer' name='rate_code' ordinal='3' />
            <column datatype='string' name='store_and_fwd_flag' ordinal='4' />
            <column datatype='datetime' name='pickup_datetime' ordinal='5' />
            <column datatype='datetime' name='dropoff_datetime' ordinal='6' />
            <column datatype='integer' name='passenger_count' ordinal='7' />
            <column datatype='integer' name='trip_time_in_secs' ordinal='8' />
            <column datatype='real' name='trip_distance' ordinal='9' />
            <column datatype='real' name='pickup_longitude' ordinal='10' />
            <column datatype='real' name='pickup_latitude' ordinal='11' />
            <column datatype='real' name='dropoff_longitude' ordinal='12' />
            <column datatype='real' name='dropoff_latitude' ordinal='13' />
            <column datatype='integer' name='pickup_postcode' ordinal='14' />
            <column datatype='string' name='pickup_neighborhood' ordinal='15' />
            <column datatype='integer' name='pickup_hour' ordinal='16' />
            <column datatype='integer' name='dropoff_postcode' ordinal='17' />
            <column datatype='string' name='dropoff_neighborhood' ordinal='18' />
            <column datatype='string' name='dropoff_hour' ordinal='19' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>medallion</remote-name>
            <remote-type>129</remote-type>
            <local-name>[medallion]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>medallion</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hack_license</remote-name>
            <remote-type>129</remote-type>
            <local-name>[hack_license]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>hack_license</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vendor_id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vendor_id]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>vendor_id</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rate_code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[rate_code]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>rate_code</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>store_and_fwd_flag</remote-name>
            <remote-type>129</remote-type>
            <local-name>[store_and_fwd_flag]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>store_and_fwd_flag</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_datetime</remote-name>
            <remote-type>135</remote-type>
            <local-name>[pickup_datetime]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_datetime</remote-alias>
            <ordinal>5</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_datetime</remote-name>
            <remote-type>135</remote-type>
            <local-name>[dropoff_datetime]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_datetime</remote-alias>
            <ordinal>6</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>passenger_count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[passenger_count]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>passenger_count</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_time_in_secs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[trip_time_in_secs]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>trip_time_in_secs</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trip_distance]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>trip_distance</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pickup_longitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_longitude</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pickup_latitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_latitude</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dropoff_longitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_longitude</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dropoff_latitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_latitude</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_postcode</remote-name>
            <remote-type>20</remote-type>
            <local-name>[pickup_postcode]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_postcode</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[pickup_neighborhood]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_neighborhood</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_hour</remote-name>
            <remote-type>20</remote-type>
            <local-name>[pickup_hour]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_hour</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_postcode</remote-name>
            <remote-type>20</remote-type>
            <local-name>[dropoff_postcode]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_postcode</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[dropoff_neighborhood]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_neighborhood</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_hour</remote-name>
            <remote-type>129</remote-type>
            <local-name>[dropoff_hour]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_hour</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Dropoff Datetime' datatype='datetime' name='[dropoff_datetime]' role='dimension' type='ordinal'>
      </column>
      <column caption='Dropoff Hour' datatype='string' name='[dropoff_hour]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' caption='Dropoff Latitude' datatype='real' name='[dropoff_latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Dropoff Longitude' datatype='real' name='[dropoff_longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Dropoff Neighborhood' datatype='string' name='[dropoff_neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Dropoff Postcode' datatype='integer' default-format='*00000' name='[dropoff_postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal'>
      </column>
      <column caption='Hack License' datatype='string' name='[hack_license]' role='dimension' type='nominal'>
      </column>
      <column caption='Medallion' datatype='string' name='[medallion]' role='dimension' type='nominal'>
      </column>
      <column caption='Passenger Count' datatype='integer' name='[passenger_count]' role='measure' type='quantitative'>
      </column>
      <column caption='Pickup Datetime' datatype='datetime' name='[pickup_datetime]' role='dimension' type='ordinal'>
      </column>
      <column caption='Pickup Hour' datatype='integer' name='[pickup_hour]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Pickup Latitude' datatype='real' name='[pickup_latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Pickup Longitude' datatype='real' name='[pickup_longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Pickup Neighborhood' datatype='string' name='[pickup_neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Pickup Postcode' datatype='integer' default-format='*00000' name='[pickup_postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal'>
      </column>
      <column caption='Rate Code' datatype='integer' name='[rate_code]' role='dimension' type='ordinal'>
      </column>
      <column caption='Store And Fwd Flag' datatype='string' name='[store_and_fwd_flag]' role='dimension' type='nominal'>
      </column>
      <column caption='Trip Distance' datatype='real' name='[trip_distance]' role='measure' type='quantitative'>
      </column>
      <column caption='Trip Time In Secs' datatype='integer' name='[trip_time_in_secs]' role='measure' type='quantitative'>
      </column>
      <column caption='Vendor Id' datatype='string' name='[vendor_id]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[pickup_latitude]' derivation='None' name='[none:pickup_latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[pickup_longitude]' derivation='None' name='[none:pickup_longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[pickup_neighborhood]' derivation='None' name='[none:pickup_neighborhood:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Pickup Latitude,Pickup Longitude)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:pickup_latitude:qk]' />
          <groupfilter function='level-members' level='[none:pickup_longitude:qk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:pickup_neighborhood:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Cobble Hill Historic District&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Fresh Pond Junction&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Koreatown&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Park West Village&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Tremont&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Corona&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Gowanus&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Lincoln Towers&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Parkville&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Tudor City&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Battery Park City&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Downtown Brooklyn&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Greenwich Village&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Lower East Side&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Rego Park&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Upper West Side&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Chinatown&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Flushing&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Kensington&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;NoHo&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Steinway&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Brooklyn Heights&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Eastchester Houses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Hillside&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Midwood&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;SoHo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Woodhaven&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Brighton Beach&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;East Harlem&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hell&apos;s Kitchen&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Melrose&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Saint George&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;West Brighton&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Bedford-Stuyvesant&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;DUMBO&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Haberman&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Manhattanville&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Richmond Hill&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Washington Heights&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Colgate Center&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Fulton Houses&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Lefrak City&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Parkchester&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Tribeca&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Adelphi&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Crown Heights&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Gowanus Houses&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Little Italy&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Port Morris&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;University Heights&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Clinton Hill&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Forest Hills Gardens&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Kings Bridge&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Ozone Park&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Sunnyside&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Brooklyn Manor&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Inwood&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Morningside Heights&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;South Slope&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Woodside&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Broad Channel&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;East Village&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;High Bridge&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Midtown West&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;San Juan Hill&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Williamsburg&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Forest Hills&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Kew Gardens&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;North Beach&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Stuyvesant Town&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Blissville&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;East Elmhurst&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hamilton Heights&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Marcy Houses&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Rose Hill&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Washington Square Village&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Cobble Hill&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Fort Greene&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Kips Bay&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Park Slope&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Sunnyside Gardens&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Bushwick&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Flatbush&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Jackson Heights&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Mott Haven&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;South Street Seaport&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Wyckoff Gardens&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Chelsea&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Flatiron&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Murray Hill&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Southbridge Towers&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Yorkville&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Alphabet City&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Diamond District&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Gravesend&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Loisaida&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Prospect Heights&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;University Village&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Boerum Hill&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;East Flatbush&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Harlem&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Maspeth&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Rosedale&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Waterside Plaza&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Astoria&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Ditmas Park&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Greenpoint&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Long Island City&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Red Hook&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Upper East Side&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='geolocator_data+' inline='true' name='textscan.41980.620562627315' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='geolocator_data.csv'>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[avg_tip_neighborhood#csv].[neighborhood]'>
              </expression>
              <expression op='[geolocator_data#csv].[neighborhood]'>
              </expression>
            </expression>
          </clause>
          <relation name='avg_tip_neighborhood#csv' table='[avg_tip_neighborhood#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='real' name='tip' ordinal='1' />
            </columns>
          </relation>
          <relation name='geolocator_data#csv' table='[geolocator_data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='real' name='longitude' ordinal='1' />
              <column datatype='real' name='latitude' ordinal='2' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[latitude]' value='[geolocator_data#csv].[latitude]' />
          <map key='[longitude]' value='[geolocator_data#csv].[longitude]' />
          <map key='[neighborhood (geolocator_data.csv)]' value='[geolocator_data#csv].[neighborhood]' />
          <map key='[neighborhood]' value='[avg_tip_neighborhood#csv].[neighborhood]' />
          <map key='[tip]' value='[avg_tip_neighborhood#csv].[tip]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood]</local-name>
            <parent-name>[avg_tip_neighborhood#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tip</remote-name>
            <remote-type>5</remote-type>
            <local-name>[tip]</local-name>
            <parent-name>[avg_tip_neighborhood#csv]</parent-name>
            <remote-alias>tip</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[avg_tip_neighborhood#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood (geolocator_data.csv)]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Neighborhood (Geolocator Data.Csv)' datatype='string' name='[neighborhood (geolocator_data.csv)]' role='dimension' type='nominal'>
      </column>
      <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Latitude,Longitude)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Latitude,Longitude,Neighborhood)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
          <groupfilter function='level-members' level='[none:neighborhood:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:neighborhood:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Bergen Beach&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Charlotte Gardens&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Douglaston&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Flushing&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Greenwich Village&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Kings Bridge&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Marcus Garvey Village&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Old Germania Heights&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Riverdale&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Steinway&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Waterside Plaza&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Adelphi&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Boerum Hill&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Chinatown&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;DUMBO&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Fordham Hill&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Gun Hill Houses&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Kips Bay&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Maspeth&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Ozone Park&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Rose Hill&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Sunnyside&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;West Farms&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Astoria&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Brighton Beach&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Clinton Hill&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;East Harlem&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Fort Hamilton&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Harlem&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Lefrak City&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Midtown West&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Parkchester&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Saint Albans&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Throgs Neck&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Williams Bridge&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Beechhurst&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Canarsie&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Cypress Hills&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Fieldston&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Grant City&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Jackson Heights&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Long Island City&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;New Utrecht&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Rego Park&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Spencer Estates&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Van Nest&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Baychester Houses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Brooklyn Navy Yard&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Columbia Street Waterfront District&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Eastchester Houses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Glen Oaks&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Hollis&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Little Neck&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Mott Haven&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Port Morris&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;SoHo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;University Village&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Yorkville&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Bay Terrace&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Brooklyn Heights&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Colgate Center&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Eastchester&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Fulton Houses&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hillside&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Linden-Park&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Morris Park&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Pelham Bay&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Seagate&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Unionport&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Woodside&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Bath Beach&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Broad Channel&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Co-Op City&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;East New York&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Fresh Meadows&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Heartland Village&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Lincoln Harbor&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Midwood&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Parkside&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Saint George&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Tremont&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Williamsburg&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Blissville&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Chelsea&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Downtown Brooklyn&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Fordham&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Grymes Hill&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Kingsbridge Heights&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Marcy Houses&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Old Town Station&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Rochdale Village&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Stuyvesant Town&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;West Brighton&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Alphabet City&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Boerum Hill Historic District&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;City Island&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Dyker Heights&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Forest Hills&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Haberman&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Koreatown&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Melrose&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Paerdegat&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Rosedale&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Sunnyside Gardens&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;West New Brighton&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Belmont&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Cedar Manor&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Ditmas Park&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Flatiron&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Gravesend&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Kensington&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Malba&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;North Beach&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Richmond Hill&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Spuyten Duyvil&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Washington Heights&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Bayside&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Coney Island&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Eastern Parkway&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Howard Beach&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Locust Manor&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Murray Hill&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Prospect Heights&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;South Slope&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Upper East Side&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Baychester&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Brooklyn Manor&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;College Point&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Eastchester Heights&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Gerritsen&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Holland&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Little Italy&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Morrisania&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Pleasant Plains&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Sheepshead Bay&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;University Heights&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Wyckoff Gardens&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Bellaire&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Castleton Corners&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Diamond District&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Flatbush&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Grasmere&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Lower East Side&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;NoHo&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Springfield Gardens&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Wakefield&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Battery Park City&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Broadway Junction&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Cobble Hill&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;East Tremont&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Fresh Pond&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hell&apos;s Kitchen&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Lincoln Towers&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Morningside Heights&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Parkville&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;San Juan Hill&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Tribeca&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Woodhaven&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Bensonhurst&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Cedar Manor Houses&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Dongan Hills&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Flatlands&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Greenpoint&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Kew Gardens&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Manhattanville&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Oakland Gardens&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Ridgewood&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Stapleton&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Washington Square Village&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Bedford Park&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Bushwick&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Corona&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Edenwald Houses&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Gowanus&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Hunts Point&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Locust Point&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;New Dorp&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Queens Village&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;South Street Seaport&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Upper West Side&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Bedford-Stuyvesant&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Cambria Heights&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Crown Heights&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Gowanus Houses&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Inwood&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Loisaida&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;New Dorp Beach&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Red Hook&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Southbridge Towers&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Utopia&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Annadale&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Borough Park&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;City Line&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;East Elmhurst&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Forest Hills Gardens&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hamilton Beach&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Lambert Houses&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Middle Village&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Park Slope&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Rossville&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Terrace Heights&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Westerleigh&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Bay Ridge&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Bronxdale&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Cobble Hill Historic District&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;East Village&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Fresh Pond Junction&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;High Bridge&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Linden Hill&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Morris Heights&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Parsons Beach&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Schuylerville&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Tudor City&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Woodlawn&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Arrochar&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Breukelen Houses&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;East Flatbush&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Fort Greene&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Hamilton Heights&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Laurelton&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Middletown&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Park West Village&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Roy Reuther Houses&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;The Tides&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Westgate Gardens&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Whitestone&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='payment_type_neighborhood+' inline='true' name='textscan.41980.626887754632' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='payment_type_neighborhood.csv'>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[payment_type_neighborhood#csv].[neighborhood]'>
              </expression>
              <expression op='[geolocator_data#csv].[neighborhood]'>
              </expression>
            </expression>
          </clause>
          <relation name='payment_type_neighborhood#csv' table='[payment_type_neighborhood#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='string' name='payment' ordinal='1' />
              <column datatype='integer' name='number' ordinal='2' />
            </columns>
          </relation>
          <relation name='geolocator_data#csv' table='[geolocator_data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='real' name='longitude' ordinal='1' />
              <column datatype='real' name='latitude' ordinal='2' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[latitude]' value='[geolocator_data#csv].[latitude]' />
          <map key='[longitude]' value='[geolocator_data#csv].[longitude]' />
          <map key='[neighborhood (geolocator_data.csv)]' value='[geolocator_data#csv].[neighborhood]' />
          <map key='[neighborhood]' value='[payment_type_neighborhood#csv].[neighborhood]' />
          <map key='[number]' value='[payment_type_neighborhood#csv].[number]' />
          <map key='[payment]' value='[payment_type_neighborhood#csv].[payment]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood]</local-name>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>payment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[payment]</local-name>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias>payment</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>number</remote-name>
            <remote-type>20</remote-type>
            <local-name>[number]</local-name>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias>number</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood (geolocator_data.csv)]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Neighborhood (Geolocator Data.Csv)' datatype='string' name='[neighborhood (geolocator_data.csv)]' role='dimension' type='nominal'>
      </column>
      <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Number' datatype='integer' name='[number]' role='dimension' type='ordinal'>
      </column>
      <column caption='Payment' datatype='string' name='[payment]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Exclusions (Latitude,Longitude)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[textscan.41980.626887754632].[none:latitude:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[textscan.41980.626887754632]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='top_pick_neighborhood' inline='true' name='textscan.41981.778114803237' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='top_pick_neighborhood.csv'>
        <relation name='top_pick_neighborhood#csv' table='[top_pick_neighborhood#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='neighborhood' ordinal='0' />
            <column datatype='real' name='percentage' ordinal='1' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood]</local-name>
            <parent-name>[top_pick_neighborhood#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>percentage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[percentage]</local-name>
            <parent-name>[top_pick_neighborhood#csv]</parent-name>
            <remote-alias>percentage</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[top_pick_neighborhood#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Percentage' datatype='real' name='[percentage]' role='measure' type='quantitative'>
      </column>
      <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:neighborhood:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Koreatown&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Upper East Side&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;San Juan Hill&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Lincoln Towers&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Diamond District&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Yorkville&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Tudor City&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Murray Hill&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Flatiron&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Fulton Houses&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='top_drop_neighborhood' inline='true' name='textscan.41981.782392928239' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='top_drop_neighborhood.csv'>
        <relation name='top_drop_neighborhood#csv' table='[top_drop_neighborhood#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='neighborhood' ordinal='0' />
            <column datatype='real' name='percentage' ordinal='1' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood]</local-name>
            <parent-name>[top_drop_neighborhood#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>percentage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[percentage]</local-name>
            <parent-name>[top_drop_neighborhood#csv]</parent-name>
            <remote-alias>percentage</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[top_drop_neighborhood#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Percentage' datatype='real' name='[percentage]' role='measure' type='quantitative'>
      </column>
      <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:neighborhood:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Koreatown&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Upper East Side&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;San Juan Hill&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Lincoln Towers&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Diamond District&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Yorkville&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Tudor City&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Murray Hill&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Fulton Houses&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Hell&apos;s Kitchen&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='avg_speed_per_hour' inline='true' name='textscan.41981.789711331017' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='avg_speed_per_hour.csv'>
        <relation name='avg_speed_per_hour#csv' table='[avg_speed_per_hour#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='hour' ordinal='0' />
            <column datatype='real' name='speed' ordinal='1' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>hour</remote-name>
            <remote-type>20</remote-type>
            <local-name>[hour]</local-name>
            <parent-name>[avg_speed_per_hour#csv]</parent-name>
            <remote-alias>hour</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>speed</remote-name>
            <remote-type>5</remote-type>
            <local-name>[speed]</local-name>
            <parent-name>[avg_speed_per_hour#csv]</parent-name>
            <remote-alias>speed</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[avg_speed_per_hour#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Hour' datatype='integer' name='[hour]' role='measure' type='quantitative'>
      </column>
      <column caption='Speed' datatype='real' name='[speed]' role='measure' type='quantitative'>
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='mph'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average speed per hour (mph)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='avg_speed_per_hour' name='textscan.41981.789711331017' />
          </datasources>
          <datasource-dependencies datasource='textscan.41981.789711331017'>
            <column caption='Hour' datatype='integer' name='[hour]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[hour]' derivation='None' name='[none:hour:qk]' pivot='key' type='quantitative' />
            <column-instance column='[speed]' derivation='None' name='[none:speed:qk]' pivot='key' type='quantitative' />
            <column caption='Speed' datatype='real' name='[speed]' role='measure' type='quantitative'>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
          </pane>
        </panes>
        <rows>[textscan.41981.789711331017].[none:speed:qk]</rows>
        <cols>[textscan.41981.789711331017].[none:hour:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='neighborhoods'>
      <table>
        <view>
          <datasources>
            <datasource caption='new_trip_data_1_5' name='textscan.41980.593389085647' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41980.593389085647'>
            <column-instance column='[pickup_latitude]' derivation='None' name='[none:pickup_latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[pickup_longitude]' derivation='None' name='[none:pickup_longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[pickup_neighborhood]' derivation='None' name='[none:pickup_neighborhood:nk]' pivot='key' type='nominal' />
            <column aggregation='Avg' caption='Pickup Latitude' datatype='real' name='[pickup_latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' caption='Pickup Longitude' datatype='real' name='[pickup_longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column caption='Pickup Neighborhood' datatype='string' name='[pickup_neighborhood]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41980.593389085647].[none:pickup_neighborhood:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:pickup_neighborhood:nk]' />
              <groupfilter function='member' level='[none:pickup_neighborhood:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.41980.593389085647].[none:pickup_neighborhood:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[textscan.41980.593389085647].[none:pickup_longitude:qk]' field-type='quantitative' max='-8211729.6179680247' min='-8264811.5445278753' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[textscan.41980.593389085647].[none:pickup_latitude:qk]' field-type='quantitative' max='4987453.1692119222' min='4959344.6133961137' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='5'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[textscan.41980.593389085647].[none:pickup_neighborhood:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.41980.593389085647].[none:pickup_latitude:qk]</rows>
        <cols>[textscan.41980.593389085647].[none:pickup_longitude:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='payment'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Payment type by neighborhood</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='payment_type_neighborhood+' name='textscan.41980.626887754632' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41980.626887754632'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
            <column-instance column='[number]' derivation='None' name='[none:number:qk]' pivot='key' type='quantitative' />
            <column-instance column='[payment]' derivation='None' name='[none:payment:nk]' pivot='key' type='nominal' />
            <column caption='Number' datatype='integer' name='[number]' role='dimension' type='ordinal'>
            </column>
            <column caption='Payment' datatype='string' name='[payment]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41980.626887754632].[Exclusions (Latitude,Longitude)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='40.873671999999999' />
                <groupfilter function='member' level='[none:longitude:qk]' member='-74.422424000000007' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.41980.626887754632].[Exclusions (Latitude,Longitude)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[textscan.41980.626887754632].[none:longitude:qk]' field-type='quantitative' max='-8216911.2853444628' min='-8248741.2731230054' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[textscan.41980.626887754632].[none:latitude:qk]' field-type='quantitative' max='4982792.0812753402' min='4965831.106999008' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[textscan.41980.626887754632].[none:payment:nk]' />
              <size column='[textscan.41980.626887754632].[none:number:qk]' />
              <lod column='[textscan.41980.626887754632].[none:neighborhood:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.41980.626887754632].[none:latitude:qk]</rows>
        <cols>[textscan.41980.626887754632].[none:longitude:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='tip'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Tip amount by neighborhood</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='geolocator_data+' name='textscan.41980.620562627315' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41980.620562627315'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
            <column-instance column='[tip]' derivation='None' name='[none:tip:qk]' pivot='key' type='quantitative' />
            <column datatype='real' name='[tip]' role='measure' type='quantitative'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41980.620562627315].[Exclusions (Latitude,Longitude,Neighborhood)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
                <groupfilter function='level-members' level='[none:neighborhood:nk]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='40.873671999999999' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:longitude:qk]' member='-74.422424000000007' />
                  <groupfilter function='member' level='[none:neighborhood:nk]' member='&quot;Westgate Gardens&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.41980.620562627315].[Exclusions (Latitude,Longitude,Neighborhood)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[textscan.41980.620562627315].[none:longitude:qk]' field-type='quantitative' max='-8174546.4594563153' min='-8301866.4105704855' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[textscan.41980.620562627315].[none:latitude:qk]' field-type='quantitative' max='5000460.6519049741' min='4932616.7547996454' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size' field='[textscan.41980.620562627315].[none:tip:qk]' field-type='quantitative' max='0.40000000000000002' max-size='1' min='0.115162348' min-size='0' type='rangesize' />
            <encoding attr='color' field='[textscan.41980.620562627315].[none:tip:qk]' max='0.29999999999999999' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[textscan.41980.620562627315].[none:tip:qk]' />
              <lod column='[textscan.41980.620562627315].[none:neighborhood:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='0.62174075841903687' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.41980.620562627315].[none:latitude:qk]</rows>
        <cols>[textscan.41980.620562627315].[none:longitude:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='top dropoff'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top dropoff neighborhoods</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='top_drop_neighborhood' name='textscan.41981.782392928239' />
          </datasources>
          <datasource-dependencies datasource='textscan.41981.782392928239'>
            <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
            <column caption='Percentage' datatype='real' name='[percentage]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[percentage]' derivation='Sum' name='[sum:percentage:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[textscan.41981.782392928239].[sum:percentage:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[textscan.41981.782392928239].[sum:percentage:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[textscan.41981.782392928239].[none:neighborhood:nk]' />
              <size column='[textscan.41981.782392928239].[sum:percentage:qk]' />
              <text column='[textscan.41981.782392928239].[none:neighborhood:nk]' />
              <text column='[textscan.41981.782392928239].[sum:percentage:qk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='font-size' value='16' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
    <worksheet name='top pickup'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top pickup neighborhoods</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='top_pick_neighborhood' name='textscan.41981.778114803237' />
          </datasources>
          <datasource-dependencies datasource='textscan.41981.778114803237'>
            <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
            <column caption='Percentage' datatype='real' name='[percentage]' role='measure' type='quantitative'>
            </column>
            <column-instance column='[percentage]' derivation='Sum' name='[sum:percentage:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[textscan.41981.778114803237].[sum:percentage:qk]' included-values='non-null'>
          </filter>
          <slices>
            <column>[textscan.41981.778114803237].[sum:percentage:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[textscan.41981.778114803237].[none:neighborhood:nk]' />
              <size column='[textscan.41981.778114803237].[sum:percentage:qk]' />
              <text column='[textscan.41981.778114803237].[none:neighborhood:nk]' />
              <text column='[textscan.41981.778114803237].[sum:percentage:qk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='font-size' value='16' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='neighborhoods'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='5' param='[textscan.41980.593389085647].[none:pickup_neighborhood:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41980.593389085647].[:Measure Names]</field>
          <field>[textscan.41980.593389085647].[none:pickup_latitude:qk]</field>
          <field>[textscan.41980.593389085647].[none:pickup_longitude:qk]</field>
          <field>[textscan.41980.593389085647].[none:pickup_neighborhood:nk]</field>
          <field>[textscan.41980.593389085647].[none:trip_time_in_secs:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='top pickup'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[textscan.41981.778114803237].[none:neighborhood:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41981.778114803237].[none:neighborhood:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='top dropoff'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[textscan.41981.782392928239].[none:neighborhood:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41981.782392928239].[none:neighborhood:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='mph'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='tip'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[textscan.41980.620562627315].[none:tip:qk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41980.620562627315].[none:latitude:qk]</field>
          <field>[textscan.41980.620562627315].[none:longitude:qk]</field>
          <field>[textscan.41980.620562627315].[none:neighborhood:nk]</field>
          <field>[textscan.41980.620562627315].[none:tip:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='payment'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[textscan.41980.626887754632].[none:number:qk]' type='size' />
            <card pane-specification-id='1' param='[textscan.41980.626887754632].[none:payment:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41980.626887754632].[none:neighborhood:nk]</field>
          <field>[textscan.41980.626887754632].[none:number:ok]</field>
          <field>[textscan.41980.626887754632].[none:payment:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='neighborhoods' width='192'>
      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
      4FrXNf73P7y2NYE0lS9hn/1Ofw8Rbh+xOJH22cIAdqKeDm173+CRVCFb+5C+8DJN2/ZyHPnK
      0zs+yXxt8UU0nU6TuwSNnzHG6+bgM0186xkfP5BHru8gTQouX98pdXkU7vo+EQ7cTOTmE7l3
      01avZv4uFgs888wzO0IY6ITOb37u5jYx1tAAh5vFSXAAE5DqHHrvU7n7pDPXKpqUolw0XykY
      091VK919D4W6bVDW/mB5Au7URXcNF0XhnTB5niOOYxwdHTlnOp5NbV97+4DzwdCaJAzDQTOM
      gPo1VE7jlX3mbt3UCIxxu10+U+nOnTs9/yqCpmnw9r0lTvN6+JpUucjRVKVvbfCV2Mly0elb
      bPE2jdlGIWlhlJoq5sDXPyRVhphf6ydN/rKuYC3QWL8goMHlg0fBKRrQeQiPaTUbJpBuFTwj
      8xD9+NrpEJNJk8iyjaFvNXgQzcr5IQyCQWFx48YNHB8f7wTcW2tx7e4p/vI//CzmRbMbD0CF
      ZPqOQ5E/xDbU3kuVrLXLpT9nICkBfDA0SNQ+pcygwyNfP43Rr+Csmto9r5REVVpfeH+0m9it
      7Q5yeCp2Arqsgvdv367SvkWq1j7HMc/znQM8n7Qeut9riBc0E81a64RKGITOk8X5in0AACAA
      SURBVFaCtV0SMFr8cmjbFm/dXWIch8iiwO8KwQd4SIXLhn3mzdD7IRz4YLVtO6hSuXTiRJN+
      RlSXrCfLMiRJgjzPe+lBhuILes/QRTMZY2Bh90pW/s7FVSgMQzY9MR2nx+npqXvPx4s7gknc
      eTkpITXg7dH/XPoSTj46URmtvgflh7pp3NWo8nvir7t372K9Xqt9y/Mc77kwwv/6Yy/i8tls
      GxTPkZTIylnoKyvBZ5NK7ULv+XU2sg1uLkgJJhdrQ6rahzeZF9Za71Wf8lRTailrt16MgQmQ
      bm6l0SaL1n/tZJiCSHhKP/pOphTnkppSKw6NHae5Zub61gNaTO8+ftDq5fVJbSK1jrXWCZU4
      jNx4SYFBZvBjjz220z75TRljsDotYfNmNyCGg6bShjorJw5XyT6zRnZcEgbYzTNPnZEnp9qA
      HDpA5I1JW4i+vktcebm23TBfGLl4gCGGkMwpzR+ajBToLoFyBPGkwQTaBXWaLa2Zj/v4wTfu
      Xyk/+Mwh+q5pG4RBl5GPe8/y+ukeBG5KUz2rTaKEfF7j9pU5fuZ9SkjkPuDSVcu6wP/W9sxJ
      kmumiDZBNOJQHdp3stMSfJkiKKCEXAekuSbb1CCOIoyTbCfluK8/fCuRfIM4kLTy3bZIOYR8
      Gkbzh+f98pmrh5qq3MST9cq/JUNyPHk4Kd8ZkxqyampkG18faeYSFEWBc+fO7fSnrErkeXfW
      Mr+TY3GvwMWLowePB5AMNtRZKWE0AkrGrpsGxeaSs576UySwJKb07tTw1SQ74UEBI0ODr0kd
      +d7X1lBdcifHWusutPABnVHw/vJdJO1QjiYex9WHvw9nbnZo5qdsjwuooYNE2S6nT7m59208
      GqvfW9vlNeXBLhynfJ1vBBhQFw3GZxLEabi9IeZBQDI6f87fy284aAxqrUXV1GiaemeBOGRK
      UFkKMNckIoH2nF94J8v4pCTvw5cLvO98v9pa66498vWDB9RQPbRJoOHKgWeMo7qGpDSHJEl2
      9tZ9phOn0xBN+RhKfgC67BewFlmS7mg1zmu3b992joC974sCr732GpaLFZbLBU5xA2efSLG8
      X/ZPggmBITudS/WhjnPJrdnnvgCZUZJuru7Z1scXxrI93o5v8brPfqfcluQ8xlWvxkD0nXTB
      9tFADoikBdDXACTFtUMcAtrqbFjwjQyI90lK+U7rh4YrmWkyIbD2jQZVXcMYIIq2DnsWFga7
      /NC0LZq22Vx8GKBp214KRwnXr1/H0dGRmyCS16J6hBt/egocrYAmwKsv3cUbL5/6TSBp2kjb
      WessMTqpOb4frQVOaEQ0pltEBkZPscKB6qSB8d2PxfGm3zW7aTBJkp1DlX2mgDOb2gbrskDT
      Dp94yvZ5vfw0k06ffbECvO90YMcnG58A8tYaTWMPSX4+ASkMkzLu+bS95Af6FgBMYLqsD4z2
      gHEpUPh34Sbktqwr1E2DqqkRJ7GKv7XWnZDzflq7zUd6/uJZpMedlrx06SL+9JP30FTt7kkw
      n+3atqMkpG/BxJHzSVNN4hwCmp1JweG+iDWCdVlgWayxLnO0dpuqj+exPBSH1nYXs7W2S4Zl
      AuPMMMr2LLWX1ge++1MUhboglhCGofuRk1WaaNoYceGhAdn6PMCeJ7f1pc8ZEj5RELoNAtpQ
      SOIYR7Oj3k4f/SZB2rSbSe1hkVu3bu3cW0xwe7nCvCixKE9QYoXpdIrbr5WoyxaPPX+0GxDj
      W8zQhcZka3J/cN/uiM+E0IgjzQKfHU/tc6llrcXp6alqevG+5JtULtZaBCbAbDpDFEXuW02S
      +fpFP+EmKskYg9l05uxwno3BWusC6+u67tnvAFxQC6UN5N/6gN7TJKB2iQmKskRRlYg29y5L
      mtJv35kM0JlidEsNTyVC7cobWvaNNR87KkuHj5TufbleIQpCJziSuHtXbHKxEtB4VVWFsix7
      +/5ksRRFgTevvgW0DZB3W8WLxQKLqsa5pyKce3TUnwA+H3hCeChARFPvPtUr65eHVbJtWZ6X
      SdO0l+6D40oMAXSxo06SAJhs9pIphfc+80ziRbilceKisMIwRFEUmE6nOx6qlObRWuty91N+
      IHK5Xq1WmM1me5mf40D9D4Lt/V5t2+Leyf3O135jUvq2Zofaoj110mqUfpHOHeQhlI8ftOAZ
      rvFI0xSbwzWuNZumwbmjs15tVRSFoxn9tG2La/dPML9zG1gvYZm2SpMM7YUVvubPh8jbYn9M
      sI+5CTiyPMKKl/Pt4sh1BJfeQ6F2VI4SrlI+fD7xiJBU3hiDUZKhrDsiH82O0DSNeq+WxJ8k
      is/tOg4jHE27aCQtyJ2bgnzHhXuvFkXhwvl8eEha0A8xPjHl6WKOstrmCK2aenOItE1eLPvr
      g/V67cI1T09Pd/qlaQ/JL5JvOD/UdY3T09PujrOq7OEHdBdey61TomVd13jzzTfx3ve+t0er
      tm1xe5Hj3pt3EUUWUdpp6jCI8NbLd/DeyW8jaSxOnvq3/RNAm8GyU7wcn6HSDPHtlnCm3UdE
      STxjOn99Ml+0Onl5yjmfxSmyUeYGlNvJPpNtyFbm39FtLhrQbS9Ap/bpXi86d2iaZsfXh+NP
      ePiA8KvrGvNNEq9ePdaibWrEm10Vjvs+ny9+D5qPHyTIcfbxAyUQLqoSURj2MgwaYwazZszn
      c7znPe/ptdc0Da7eOEG0MvjSbxZ41zdHaEqL5TsR8pMcpzda1MlDuNW8B9O3S30CaMhyxuR2
      HJcAcsZLxA/938eEwNYtgnZ8pP0pv5VSOwgCjLKRcz3mUkOjgw9X+ZxuQfSVoV0qTleS3PP5
      HG3bpXz3mUD7TEOC+XLhdqTkxDmaTJGlmerLr0lqre0hfuBakk9cjR+stSjrqgtuCQwMjMue
      QZBl2WCE3e3bt3HmzJneu7qu8ceLAgiAd33NOXzpd27BtgBsJ3yCMMTJ9Gvx1DcA1z9bfXmJ
      sTQVzxlJ2ukPCly9+wa6rmsUReEc2Aj2HU5RmKPMlqDteD2ILU5Zx/I89wajc4FC264Uv0C4
      a7EM9K2kCV84A8B8McditezhTibahbPnEIXb9O5k1nCJfkh/Zd8lnfgzmhwaP3TSv0GWpMji
      1Jk+dN9EEAS9g0357ZUrV/DEE0/06EHhoh88m+LFWYLjSxlgDT78fe/C0cXO1LStRdPWuPXF
      Gqu7IjOcNGc4M2hqUvr0BEGwE6HD6z50UnAG4N/JhZR26km7ID6NQNcp8W8lbpqtr+HDgXZ4
      VqtVLxeP1pfVauV2VLjv0Xg83mlbEwT0P6d327aYL7fMHxiDKIwwilOM0gxlUbqtXrqdkXDw
      0YrzA9f0gL6uk4dZhJ82sYq6RBzFCDZ1Nm2LqqmRpAlms9mg9LfWYjLZ3klMuNEaKgmB07dX
      +P3/8yrGxzHOPz5GVXTjEcTAu78jRrm0eLh+edcE0g6sNNtdglShDypNNPDZ5EBH3PF4jNVq
      papvX/v8ClFg9zDoEJD95JKO6pH/G2PcTY90OQbtBCVJgsVigeVy6dJ5a1p2CKqqQhYnaK2F
      MXAHiW3b9kw9Wm9QzqAhsxMY5gdNa2hjJsu0tjv95bHAZVViOp1iNtm/BXzlyhUX6C7Xe1VV
      4faVNT77O9cBAKuTEr/1i6+gXDcIQoMnPhxjeavF+laF946/0E+LwjugSbp9dvAQPAiDcTx4
      5zjBKRJKepNyySv3nOl7vmX6ILgNTW5ittls5rZEq6pyVznxAyRiQNpb58nG+Ik0HdBJTcel
      MVf/xnS7HZQoSpoofGyXy+WgJ67GDzKw6Mvlh3qzGDesfBLFbtIOgbUWs9nM3fnFn69WK6zm
      BX73f3oVt95YIJ1EeOGbH0K57ugXjkLc+HyFVz9X42L4p/jQ5B9vr0mV5o80N6iM/OFhg0MS
      m7fxoO812zeKop2UgFwyyTrJrtTa0aStJgDkwo63SZOvbVt3OQdtcZLdTUxKhzRkkgRBd/ne
      0dGRi/ml+3vpvW9NRP3lXqzErPK0lpu2Gr2kuUfP+BpBlpFuEbxNbTzJ3AmFeRMEAepNlmuK
      xtO+tdbi/v37O/RomgbrfI10FOFb/uLTmJ3vzLs7b61gAoPZhRTVosbtOfC7j6S4Uz+Bl7Lv
      394Ur9mZfKB9R99EnKHF56G2v5SwvC2tXS4F5QBrzOKO1vc4jHGcOe4afbiEpIUwLcxpLVCW
      JRaLRS+ck5LX0qTkN7gsl0tUVYXJZLLjAMaZjuqi2FiJq09Ka+PBF+KcVvvowstxIdi2reoj
      VTeNywAn8bW2i8dYLpfefKZVVe3E+lprsc7XgAWCosYjj4/wF/6T9+H9f/4R3Hi1u9Xn3OUI
      8cggqyw+8oUcpR3jFx//9/WsEMRUkpn4bJO2l4+wvO5DpsGhcaLEYIeoTM6khP8+0DQf/a39
      pnrX6zXW6zXu3r3rJLyUqGT20KKX2iLGN0EAa/SNg6qqcP/+/Z4G8a1hhmgjtdy+CcN3yVrb
      7vADx6NtW9Sbk/d1WSCvupTxre3c3eV2pwY+t27KhyqhKMruDufba0RXT2GqBtGqRBAA7//Q
      GXz7EyM8czlFERmktUV9FOG5lxfdNanSnvTZuHzW84Hx7ZpILbIq1psrlUK3ANJMCQkkUeSu
      AJWVO1RSUlPdMic9fetjFPJYlLavlFxcalKAOn+uAZlxANy9XXEc43Q5x5puXbfAZGMSkQm1
      Wq3cmUEQBKqG4MDdNLhfj5aCRY6ZppFleWqDC5ogCGCsQRtGTgOsyxwxy5R9yOTU4Pr163jX
      u97Ve+bSJN5ZI3znFDAG8d01nh83CH/gCXyqKZHfKWFMgB/5trPIyxY//8Ulnrzedhdl70OI
      v9dMArlWkASqNgceQOeT023RdUf0dV07fxpZF58Ucp+eZ0WT+Gj4tW3rGEBbF3AmJtBsX9mO
      1ncaQJ+DGA9xpHt10zTF7Xt3Nj7zXX2ny7lLf863VrnQIonIndNol0lzqY6iqHeIKLXAkCAi
      CIN+7n2faZjGifP3r5oasF2SNR7PrdHQGD2cE4DL9cPxLcvNblbdAhawaYi3riyRnU3x5BMJ
      Hr+6whcejvE1sxCRAW6f1HjqeoWTUdCtAeRChgNXlZoXpvRs5B2iMlXTuCs9ge4uKGu729Qb
      22JddUlSmwFpLJmOpJckniY95CSSIPHVBnbIvNMmiLY+IeC4k3/9yekJ6g0Dc1NttVpiuVyq
      0hrYxg0fHx+7H7p+dYiJyTlP1snHVOs3p4+T9ma79csnlTHG7UgZwPn9D/k7ufVUXantXr9+
      vUfPzv7vfMHC2yvYcQyT17h7UuPemSmSe2tMYPChwiIOgBvG4h9MDb7rw0c4MuhMII7Qg9jU
      3KzgxNrpnAEM+tK4NdbZknZjGwYm6O0OaBJd892RZpQGdCjDT2mHTD4fDhrw/KRanZKJKO8Q
      beMaY5ClGVJrXSRUa1skYYyqrHa+53WXGzfhLMsGk1BpMBqNUNd1z2zTTLxDQe6y8bGp2xYx
      y9NjrcWqyDFK+pOwy6pnEVWxuxaK2//c/LG2S5O4tgbrawtcrlvY1gLW4qvfO0N7DJjrJZqL
      E4S3ukPCGwb4K7MY0ylQpUE/L5APiPF826McIZpQTdNgVeQ7ASEdk4fIq92LG6KBAZRS2vcb
      2L2vgPpwiM/6vvY1kKfmEuQai+qjyUxXmXYSf4W6NjvfDeFN7hTcEU9qHjp/oO1SY7pt2iiK
      drJN7+svt/WHIv36plWLwPTNmlQk7zLGINqsubJkNxz0/v37ANC7ByAMQswb4N6qxOWqQVB3
      +FQPTxFd785gEHVCuDnO8NUnOQyAd4zFu98/2U4ATmTNppWDoBGIMyhJXO6DD3SpQyy6HDq8
      rljcicvrlG1QGW5L9iaZCJzg32oDLevl/+/zlPSZjrKMXHdQKCalNOcmBMdFq1d7VhTFjnaT
      ONM2Lb2nxbFvbCUtmrZBUXXXF0VhqPKApLcxBmVVIg7jHQ1DB1+8njAIEZjOV0s6FwZB4A7A
      uAl+Urd47cwIz50dYfrKHVgDRO/MgdYCBgivdROhPTdCsKxgqwaPwuDRs0k/N+g+CcY7xe1A
      TiQ30LC9WE9ru9sS4yhG3dS9d8YYREH/ZkDfwPP3/ATVh1e98YX39U3atBI06c6lN6eJD/j6
      g5y8KICbguHJnPS1z9seAk4fmlD0I323APROxbnwojp227ZuH5++4/VJepR1hbptd7S7pKec
      ONpWNd3yyMEYg8gAjQXeWtdAGKB++lzH/AAQbPGPXrsHU/XrjXhn+aGWJIZkcF/ACidEHEao
      6hpBYJDFqSNMd7PflkiB6VYIGsF9GmDILODfRZutOCqvRTFJ/DVm9kk6bhLKMtz9GdimHyE3
      iSiKevhQQleKkirL0jnLya1muQbi5qmGr6QLpQ/hmfBkPWTiUH1hEGKU6M6Gkh+s7W58tLBI
      o60klyaTRjuflqboOckD69bCALhwa4nmOMXVusFTQMf8TfeO18gpE0kmk8jR7yGbUCOEMQZp
      kHSmjd222i3y+vvjkbgRUNr7nHiaRJZmCh9EijKy1qIoC8Rx3LuNRQ6mz/zjwNcTHE+6u5d/
      R7a3tdY5pVFfq6pyvj8keEitcyb34aRt3Q5pI87ktL3K7+LSJhAXkHKCSPyk6WQNEJrQm9lO
      mnqcsafTqXtHv3mSMI7Pk6MYd6oWnz03wvk0wlutxZMAjLNGNu0pOET7Fy+66cM7LL/lzwIT
      wKILfmit3aQ86dJjkONWzA7F6EfL+8mJzdtYF2vEYbxD6Na2aOzWia6qKmRp1rupXdalabUh
      IJxIOpFJQaYNBa3TM4r91aScT8hI5pDPfBNFgyzLMBqN0LZd+hXtELO1Lcq6RrqJI/bxw7oq
      AGuRxumObw8AhCYY1LhVUzse4P0fj8duXUTt3bp1qze+bs0QhjifxljUa5yME9xtWnzP26do
      sghhvtk6NoCx/YlAf0f7XA980piQGDJFXB3YHoF3YW8jlHU1GKitaR9p/5E6TeO09x19GwYh
      xslWalBoXxzHB2VQGwJjusMacmeWeGtAC19rrXON5vVppgX9rUnLQ2hPdadp6k6Nre2yI/gm
      IQxQlEXnojwauy1sjksQ7k4cfqgYBN1unzw064VDNg1ggSDqEl81TYM4jnvZ3QjG47E7t9DM
      4HCzDnjh3hp/eGGMo0mCr3rtLoJu2eKYnmql3z0NINWfj7jyG6klOKG6xgzSKHELoY5p/eGD
      vF1ifM6wO2GQsI7QGpD3YdM0KMrS3QEgQVPpsr/ANqCEbHwyb8iMkbgC2/UA0Enh8XiMKIqc
      u/QQI/vWQZp5SM/JXVzenUvOZvvaOhpPUVZVxzxBvz1aq8xmR11MtuILZq1FJHIWSbz5VmcQ
      GDStwWymxwO8/vrreOGFF3rPrO0cEL84X6PcNN0ag5MkwtsATh+a4r0nOc6v694agE+EqPVI
      Gk4MjUCyw/TOp8o5MXzfN03jTAduDsmjc7eobNvuLt52Vz27OtsGeVVilKRobJclONts/0kz
      aN/EJ+1BufrX67Wzo4foYYzpneRSKCdJZR6jK+nvEzASLzK30jTtLa55n8qyxHK5VGkq27bW
      uitI5XsniTc/UIQWgbZO0SAwAUZphEQRjNZaXL58eSdQiMzJebNt+3Pnx07a35imeGZRwgJ4
      9ckzePLqCaKmP0ZRVVeo28TroSeZgi90fKaJb+HG69NA2nhyUcXfNW0DC7u3bNU0LtgiCmx3
      UoguG9vQ1aS0yOT4hmHoklYtFgvn3699Cww72lHyW18C3H2CiIDGYTQa9e4Po3fkaEeXaRBO
      +07/OU3lc3591L7g9yG8ZdvaYpnKXbt2rRcAD3ST6p2ywY1CmLPdh3j6tMDDixKrJMToJIdp
      LPLAIG23i+PIGIPQ7I+N5wwm95R9tqR0LOP1yM5rC2v6ht8F5XZfNlkENGntTCQASRxjMuqu
      O43CCC3LcpaT16WAZpOLMkvS3nuyofM8711PKm1SKQ19i1uyeXm5RvgDaYd6cnKMRiN3KYRk
      eumROnQaLtcXQ4y8Xq93ToJ9/CD5hfdLG28pzPI8x6OPPqrS72peY9Xq/VmGBrUBxkWNcdng
      5izFO7MEL74z3+JBkp9vh2lAHeB7sfyHMzDfqqTntNjm30rwOXxpdz0RHgTS1mzbFgbdToS0
      9ykW1udxGIQh4ijuDQ6ZFxTxxYEkq2Q2TgP5zqdReV99ay3+ezKZOMlvbedcd3p66kIpfXhp
      bXAGljEfOzQKtjlDtSCk3mZEGO48k4E3xnTpHE/mpzvJcuVuFUEcx/i64xGi6nUsytugvZ3I
      AGlo8NY0xeeev4Bb6IJlzi8KPLPxCbIGqC26kEiyH4dA2qL8uU8K8OeH+Mto5oBsV64NNHw0
      s4wD+cLTPbM7uKC/ZomiyO1La2YTFw5c4nPJJvvuw9nHnFQPB8qrSXXM5/PedUm8/aFFtsRj
      Hz/IiSjfkaDj+MokAdJxDui09dF05jxICU5PT53/D6dJ0zR4Y3kKRA+jaTuHvrw+RWuBt04+
      CwuLIAzwL9/9OP7wLFBNIkzLzXptkuBWY/r3A2jMp5krEoYksQZcunBbmwjHk7zKweQaR5M4
      VJ92sMbLLRYLjEYjzGYz5yRGk5Da4RLMWouT+WmXKpDtj2saUJoCPlubTAhpevgmCplHxnTb
      miT5KUCGTpDpGWkUAgpH1Ggm6aqBNhYSfFqFxoPctPkBIWXH8Gk+Ej6yvaZp8BtXfgOvnL6J
      N++/jHed+RCuzf8E/85X/dd4Z3kFd4u7CCZfi/GbV3D1yafwjonx1MkC522DyWmJ220wfEne
      EOxb8OybMJo612xBWRd3h5aqVTPL5IDWbdPta29uZs+L3PnGc8agv1vbYr3Zs69rPZyP8KSJ
      LYN3fPQIgqC3kPYxlrYJQDY/AJfgVwvuIWGwKtZY5GvEYYTZeII4jNT2vhJeGAKiBeFJkWq0
      VSvXCFRvXde4d+8eLl68qNZ5b/VFvHbnJcyrOe5dfxtRkGJe3sKZ7FF8/Ev/Df4o+Cf4yf/u
      84i/9YfQfOQvIK8jvIMAabVCHU5g3nrrLcuPmDXVLJGicvxa00MIJxc3vjZlfT6ziA+grNvH
      fJp0bdsWrW07L8S6dBdcZ0m6OczZHRx+FqFJbUknLbrs7NmzLpEWsHsbJs9uLRfjFFTfti1u
      3L4FWLvxu9pez0p4EPNzXEdJikk2HnRS02g3NDlJg+8DXk8URd50kJQWpigKHB8f7wjctm1x
      Oj/FX/+9v45PXP9ER9P0LMKw2y26vXodsBbf8jmL/+A3Wqy+/ydQfu23Y3z3c5jhNdy48L27
      9wPwju9jar4LsK/DnPjSRJCehPuIKM0FTYtQXdq39I7b3nRneMQ2BSh3jcb8Wp28XmIGzhSc
      pjweWJoknA4aQ3KBVZQlqnrrz9+0DVZlt/WbkJu1wrhdsHqJSZphkvkvnuN0HBpn6rcWi6GB
      nOhyc4TaHkp80LYtqqbCjfUN96xua9wrXnf/v+uWQZMEAFqMf+1/RPynn8b0SYMbH/mrALC9
      JpUIvo/xNTt1X0fl9/xdd1BVHFwfr0MyyyFaaF8/4zDqMkjHqcr8wO7tOZoGkBJf4ufuLWBx
      vgR8IvD/yezjps5ytT3VDYMAs8kUaZKgamos8zXKqsI0G+Pc9BjjNNvBmTsm8nYOpemD8IMU
      VhodJJycnPRiAIBOaKzXa9yan+Djt67jRr5N2z6vtlucxgL1qMXfjjOMvv3bce2hi/jsrMLZ
      7HdR5HcADIRE+hZisswhBNLqKOsKVcOSOSnuDPvql5LTty4Z6ovPRvd5MB5ar8RfMkiWZb0t
      Ss50EngdPNaX3C+2i3+L2XSGvMhR3L8Hay3ytkDV1kjDGLPRBGmc4HS1cO4h09F4Z/2k0WVf
      XzW6+viG/22M6bmJSNDSo9MEuLZ8G//q7Y+jbvrRheNojFW9wnvftLj6KHDXvI72pQaj55/H
      m08+i7/fPIqLt17Dc09c6AJiZEe5iud+JLxz9I2mvofADR7bo7bWulhQDoeoUlmv7500mWj3
      QcPZx8x8x+bQvvJvaF+epPi+sxeZrAro06RpW6yL3E2cC+fOIwyCLkkUK9+2LVZldy4QhxHO
      jGeYpCNMRxPnik74SRpIfnD9shYWnQZf5CuXzeIQLSz7KLNT8HZv377dwwfodpJGoxE+c/sP
      8Pa938V/9P6/gg9e+CBm8cx5lhpr8cdPAN+3XGD2h1PY5Qrnb76Jjzz1bRjNnsSZ6UUEqPRr
      UqVUiuN4J534VwpZnLjkSRQjUDdNz2HuQcwi+kbTTtwm54SUB3YPOngST2nG8DL8TITOO+Ta
      R+LN1xA0abhmItufTCNrO5NoNpm5TAmER8QOrKIowkQJhfSdOssJaG3nU0UbBEkUu3GTJs7Q
      5DbGOC0m06RQGX73F8chyzJ833u+Dx9+6MM4k5zBL3zuF7CoFrg8vYyri6sAgIvzGF/7aop7
      b0aYXMyRfN0t/MHqFl586sNI67tY12wCyAHgUoET3acKJbP6dgRoZhvTJUS1tlN/VVN7U2lz
      vPhCy7f4ld9oE2PoEM1Xn7Y9y7/hE02jEZXjLh68Dk3SEmjaoqlrRGGEepNf6fa9ux1zbGz9
      LM1QVl3EV9O2KKqy84sK/GGW0ozUfIcAuNTmbdv2tlQ1Wu7UaVukWYq2tS62WIN79+6haRoc
      HR2p5lQSJvi5T/8cyrbEuewc5tUcVxdXN7mIgGdfP8bv33gUR4+X+KEnPo2Xjr4D18v7uPT2
      P8WH7/8irj78l7o1gESSN1bX9Y4nprbok7DPJOEEArrFp4FfcvCyPMObHKxDUoNoTMqljtY/
      YlDJPNyWlX3iTM0XzRQTwIPY5aTTJqJ0FYFFd7F4E6Ksa3cDZl1VMDDI0hRZmuL+6UknODYm
      i2bry3Z9/EDPKcFVXpcYp6Od76WmlZNsPBrvXWRTtgwN2rbFS++8hOvrGmLeKwAAIABJREFU
      67ib38WyXiIJEpRtCWOB5948wvEiBmBwOk7xUvrVuPXiT+PJo4dQLK7grZd+A0++8/d2D8Jk
      5w/NVa8xwD6QZsqDmiBSIvskr9yak4MkmV3DZR9+Wh3yG26GcWbWzCi5vWyt3cn0tjVvIhf7
      3D0HKlPjdDHHuTNnMcpGyIscWZJiXeSdSWV2XaG1/EYcl53+G7jdMgm+MxKgC1RarVZOEARB
      oF4vdfPmTTzxxBNK7ZtDMlvj6x/6NpxWS/w/7/xzVBt3CFjgyWtjXDzZxhu89p4fwbnjR2CM
      wc2Vxfry38AivrXdBuWd5h2lC924uSFns2YS7GPmL8fe5m0O1blvMS3xp2817cbrJonOzZ2h
      BbFGTxIoRFPte43G/FsJbh2wSSliAESbSwHv3L2Loui8XpfrFQwM8qq7Q1iaVfLSbQ1/3mZg
      AnfDC38uv9O0CEXTpWnqdUqkoCENgiDAh85/CP/ec38Jl44+hKPVBB+89wRgARsAy3EDkDCJ
      YtyvS9i2weLm6zi58TqCZ17E649+6zYtipRChKS8oEGqz0OlPQfNxuT/++rUzB6qT5aRizH+
      t69tAunKwHHS1gHyh7ch8aTB1kwPbaLwOobWYpLZ0jjBOMkwzjKMkmwTE2GQbZ6TSaS1rdGH
      aCDXTpo5tY8njBmOR6Dn5Cbim4AAcLNs8OSZr8P3Jz+G6s4pjDF43+jP4dH5EQzFmh+fx+r+
      ddz7nb+P5vQeHn7m62CiCFerT+tXJFGyJmuA+WqBUToaRMLHjIeAJOqQ9jh0W5RPaO5YJyc5
      H2hZP2d4yqjMc/h8OX0Ftow9mUycm/YhtOUxsfSem3aaRy4AGHTxu8YYd2u8tdbFOuxjVmpD
      M404LjRJDj2QpFDQ2WymagB+Qq61R/EY14oa69Yi+8h34OnxCUaf/zi+6ZE/h6f/8ofx2p98
      Eaef/h089G/9h6ibCvW1VzG6/AKCdIRpavBq+Mn+BDBmeygRRiHuntxHGiXOxtMWaj5beehI
      nNfjC8sj21CaWBK0PDO8Dc1hjuPB65USj08Ykr7a2sFnevF6CBc+2L7vCGi7T7ORfQdoUjPw
      fmmuK9RHTbNq2o7HdUh6Dm1AaPxATnAcqK22bdWLMAgWRYHPL8peMMxjD309Zv/447j76q/h
      KL+Ohx57GqPv/SlUVYF0cgbNpSdw7fWXcXTxXTAPZfjUjU/sXpNqrXUXycXRNgWeZqfSb43o
      vtkrt/pkWWmy7MtaoZkvWtAOvRuaAJwZ+MDw/KZDTCsZYp9fzHg87rVLv5MkcYxPQe0Sb0qK
      K/u/z2TwabChRT7vc2O7QzXNH0oKq2uVxcr6+YEmkcYTN2/eVHGZrxb4wvUv4n975R/hl/7k
      v0fNhiGIYiCKEdgCX/rk/4U74aOY330Hb7z8zzHNDNZ3r+D2G3+E1/71P8Uff/5TmJxMdq9J
      dTOwaTvpL6SILDskfTXQdmo0u52YgQ+ynHRD7WuTVp44atpMs+fpvaxfmlVSwvJ39J7Xyd0a
      SEMcHR1hOp1iMpng+Pi4pzHoBhrykNSEkhQYnJayT7wfMomx1k8yowx2mZrapTT3AHAlr3FS
      t15+oNSQmpA4c+bMThzA/eV9/I1P/Wf4wd/6Qdwp7uEjl7669405fwnHP/Ez+OjX1nj64hpv
      vf4y0vExnv7gR/HQFFjeeh1BGOPp9zyP5p0beOH+C7smENC/0ZCrb62s1rkhk4U/96liOUm4
      PX+IWSUnlmREzhDye02bEXCTTNJDmiIayB2NIAgwGo3cJsNQivO2bd0VSj6aaxOP8BkKEPJp
      bU1AGWOQJenOGLmAFxYs9I1HndkmM93xPvm05BtvvIHnnnuu/+z+G/gXb/9LXD7+Glw+9104
      kz2E+zU7TQ8CXIrv47H8FVx53/djeeMW3vntX8HFR9+Na/fO497dzgHutT/9Am5lt/DyBeWe
      YI1I8vm+95qZMLQwkpJmJwBemDB8gvnwGWJm6cvPyw99x5lK4sDr87mI7xxkAb1Uij5o2xbz
      +byXyFYTFFL7aKfdEobeSaA+hmIySTpq6wo+TrxdHw9dvny5FyJrrcUTsyfwsXf/OB47+28A
      0fke8zuoS7xkP4hHv+XH8N7Pfw7HxQqry9+Ez33q/0Acx7hw4QJGT41wY34DTyVP9dOjSyS0
      EzyfepcD6LPrZRs+0HZktG81BvT1ScNbK6tJKx/ectL46hrqK5XToGkaLBaLHeaX/fRpNK2/
      9J7TzaJLGSN3e5q2y94mzadD2uC0Msa4S1CCTT3aLTZU/tq1a727gIuiwM++9LP4xPVP4tL0
      E/jB9/+3O20lBrhz7qtw/fi78fjNNb7xG78RxhjcuXsfnymWiOMYt2/fRn2zxuypGb7h3d/g
      1wC8gwSaitTMHWkr79u+9JkaPtPlEEb3tSM1CtXvPe301CEFhG/ScObfNwk0oHDHIRNPs++1
      CSJx5rs8eVV2jm1irMrNVUVplHzF/EDpd/YJGAA4d+7czrO8yREGARblHXQhLn2oLPDIJMO7
      v+NjCE7u4Vd/9VcRRRHOX7joNG1ZlSiyAu/cfge//dnf7hbBGkG1gdMkma8TfOvtQcCnYfh7
      vnvgk7bazgKB7B/V6VPHmlkn++Uze6hubZvyEBiPx4P3fQ2ZErIPWmQaPR8lqbPf+bs0SpBE
      u4d3PlOG45FlGY6Ojtx47DtPIGjbdsf7OE1T/Py3/Dx+5gM/g7JZIGlv997TaJybl7hR1Djz
      7kfxnd/5nWitxdU3r+ADH/gAfuAHfgCPP/Y47uAOLr7vIv7OR/5O3x1amhKcCfkAH2IeDA2Y
      jJHVbHppS0qTiC9Ifapftivr3QfagGu2tyzrA4o/OFRj0W5PGIZorXWmw581aJNX0xhSEBpj
      3FYu7QI1Is6DzjIoHSRdO6sddFH99+/f3zkDaJoGb5y+gV/6wi/hTDLDE8kCdZDg9fIIFkDc
      tHj+3hrjKMCjZ0dojMGzTzyFR/7dH8RnPvdZvPLKK3jxxRfxsY99DHf/l7v4roe/C5fPXe68
      Qbn619Qj/R5ycDrUJPG937dn7lt/+Bh9yEyS9rr2m95baw86BzhErR+yFuBQVRW7xM7CiHw5
      PgbSTEeNDhKkiekTSBwWiwWCKOzy+Qgh5dzek+01uLQTpjm/EdCk4biXZYmf/uRP483Fm/jR
      534Uv3fjU/i9W3+EZy/+m/jMtV/HTx39RbxQPoL60RmqcxkCAPEXb+P40hTPPvccbt66BWMM
      wjjEuW86h6NLnWZSt0G1ZzLZKqC7Hx+ikrWyGpMN4UXPtUGl/7XcOLKcdr6h2doac/BvDpXs
      VVUdfJtjXdeomhoRSzMuQZtUcoLzvkjwrR183zg6bO58AIAiX2GxWiKOIqRJl3g4juLuPjjb
      +ZRRUM++yWitxY0bN/D888+7Z23b4srJFZcL9p+9+c9wPjuP109fwxfuvoyRSfFsNoYNAGxu
      sAmvL2BWFdpZivOjMb73e7+3SxnZlvjNa7+JFx56ARcmF7r7AeRuzyFATMsj+ocIvQ+09oeY
      SmNeWQ9fL0jcfFqBJrWmFTR89pl8Eqqq8vq4S5jNZmhOTnZMH61NTYN9OXAIP1hrkZfF9sKJ
      TZtFWSLfXP9K5YIgQBxFaK3FKM2QbC71TpVbIInGdIEIHSy+eutV/Nwf/pyL9Lq5vomb6+1J
      8TekX42HcAzbAtHVE5i8Rnh9gfY4RTsKXbZsygT4C9/6d/FK/jkgsNuAmAcFIrY8QdQGgQ+O
      fMf3qrkZNLTg8ql6/syyciQ5OkZi39jd7VPN5pVRUT5NcAhQluZDtEAURS7wRGN2+lvTgFoW
      OHpHQH0YynEkoW5qFFXZz7c/oLnbtkWxCfzh9xE//vBuslsq88wzz7i66rrGr3zhV3B1eXWn
      rIHBi+nz+KuzH3bPmnmN6s07CN81Qvv0eUxns51sf9ZY5Hbdrat4Bx4EuFSUz+k3leGOZdyJ
      SzIRqUiZIkNT09rAW2tR1BWKpkLZVFhXBRb5EkVVoqirTS6cLktC1dYo6hL55uheMpRWv4zh
      HVqLDIF2IHYo8AnI8ZGTtqwr1Czrhq+OIa3mxUH871sXAbsX21lrAdvfrODtv/rqq25hDXRC
      4Kde/Cn85Ff9JIDuzrGPPvFRxEGMSTDCzz72H+MRc8GVL+9UWH5pjeb8GNHRyAURcb58aPYI
      vu38RzEdTXdjgg+FIbtXmg+8DZ/EjuMY0+m0u3HkAcwNtyVqLaqmQl6WsLbduDG3KMoCSRy7
      bG9JnGDMLpS2sCibCqY1G1s76CVnHbKPtfDJQ8CXA0cDuZintqX0BvrmWxYnve/IpODf8z75
      BNkOLhtPINljbWym4wmOpjNYWNR1g6apUW7uKpZB8NZ210Y98sgjPbdzYwzOjM5gFHVjFgcx
      Xrn/CrIwQ2hC/Nz1/wH/6ehHcSk8DwAIJxHCczGCeYG21uncu7eNVLuvE9rgalJeDhQnuM8c
      oud0cRuZB7JebUCceWIt1sUaJgi6vzcpQaIwQpoksHECExgkcYy8KEDVWGtR1RXiqLsv7GRx
      inPHZ1G3BmkY72wH7xtsyZya6/EQTX1A9VV1jaqpEAahC2yXdWlpKrUJKvslx0c+twDatkG9
      uTdBw1HSgkyf1rabBbEe9cVhsViou0PGGHzmzmcAAEVT4Mr8Cn742R/G9zzxPfj1f/0PEJnQ
      Tcrw+WMcP1ag+eBjPU0igXgrkqpzaOGpITb0/BDzgJjfWqumwSNm0iRh3TbIywKni3k3q9k2
      XBB00VfkTdk0zWYCdHUsV0ssVis8dOEi5ssF6OZ6g8NPnDVc5bqBl/1yzKUg6C76KNZLwBgE
      exicCyeOk1yHkfbggkrrS14VaO3whPULPwuoEcO77bRti3v37uE973nPzoQKwxDf/cR348r8
      Cr54/4u4trqGX/7iL+PNxRX8F2d/orv9HYBNQ+Dp80AUYjIZ7/SraRrcPz3p3PyjCCfzed8E
      8jE/EetBgBNE2+PPsgxlWboop6IoVJtWOzmkdzfv3XaZFYImdMxrggB5WaBpW/esabsEuLQQ
      O10uMB2PUdUVVusVzp05C2NM71bDfdJb7oBpILWdtXZwD1wCHQg1bYO8yN2pLNXl07QchsxU
      H9C7UZKhbuoucRl7Lx3vJGRpivNnz+8k3/VBVVV46KGHvLi87+H34W+N/xb+4Obv4z9/6W/i
      bnuCbG5hZg1saNBcmsCsKkRhhGw22enrOs9hbQtjgaZu0NQN7pub20Xw0K4GEVkLMuHfcwnI
      /5bMP51OMRqNcHR0hCAIXKo7TQtpATFBEAAGuPzwY069tpt0H61tUZYFVqs17p3cx/3TE9yf
      n2K+WKAoSyxWK9w/PUVd11iu1rh15zZMELgb0wPsbn3yfu7goQyWJpEJ6DT0UCBanztzFpNs
      3MODm69EK6m9fOPJc5JyKSzNTmMM4ijGKMmchjVmmy1EayNLU1w4dxjzU3uvvPKKy3jtMy3H
      4zFePPsivvnCRwAAZQr8teXfw2+VL6E9P0HwgcuIJ7tbzEVZ4va9O1gsl2jR4vfX/woLe4rP
      5y/7vUEJ9ql9YDifPweeD56rYX5VKP0Qk/hOh40xOJ4dIYkTGAPEUYSqqTGKR+4onm45bNrW
      2f9N06Kqq01KQIOqbhEZg/lyCQtgcv6SdxG/jzb7nlN/vpwNhzzfjcLioLl407faOkArO2Tu
      BUGAJErQ2mJwnJM4wcVzF3oHd/u0aZ7nePLJJwcToxljkCYpgjNn8MMf+HHc/aMF/t87L+PF
      Cy8iunQR8bmpu8MNgDtBT5Luet4ojAALtO0cga2xaheYtyfb+wH2qXFCQlvQyv8123gymfSC
      uqnsYrHopV3RJJi66IRF1Ta4c+9ur83AGBRV6dKch0GAIAx7QT55kWM8GqNuusv3puMuo/Io
      yRCY7uiePDBlP6TNvG/SS3ocHR0dlHiXQ13XbnfMx6T0vzTL6LnvgEvW0bksm+5Cwc2N8ZRR
      gsrIxMZUTxAEuHT+Ynd17QZog6FtWpw7c3aHdtZaXL16FZcuXXKhn/vWkNZaLFYL5FWOWTZz
      B1283Dv3r+IT89/Btx59FOcm53H77h3EYYTV6v9GGB7jS6bGW9Ub2zvCDtmZkAtm+W6oDvLu
      IySbzQ0tdHu7NH+GJKW1FnXT4N7J/e5/hlPTdhddOBPKdvlrkjjuTK08R5KkSOIERVFgMpog
      CLo0jeFGO02nUxwfH2M0GnkXiBpNtAlDYIzp3d97KFhr3cXW3EyR9RNwJqfQRGu7o8CmbXqM
      yxmNUieWm/OSpm1QVFVnN7P6jelu5xwlmQuNpPrOHp9BLFK3LNcrjNKRu3mev7PWOtOT3wIv
      zTAJxhjMJjNcPNO5OWt3y03iGZ5JX0ASpLh7ch8oK8DmaJolqvwYf/RL/wjvfvvy1gQ6xAzS
      bPp9Ni89o3hW8gb0qfR9Zge11dptavGmrntStTsD6G+nllXZBXeYLlHsfLlwUiOJt7fY08Sk
      tHy0WKf8SD5TwqcZ+P9Dbs1aPxeLhfOc3EcnOQ5lVeFktUCWdO7MZd1tocrzgaqpu0zdtj+x
      yrpG2zbIkt2ItSAINotiZp+Pxhhn/fQ5ZdXd+ng8O8LDFx/yChPy/T+Elw6Fo/Exnm5f2ExY
      4J/8V38T7//o1+P48hIf/7m/jfjpi7h45nGYW7duWWrYp9r5VUhDiD6IOaBJIV/HeYgkqfi8
      LpEX3X29xUaLUDYL6YtCdSzXK0xGY4xHI9y5dxfj8QRZkmI6Gru7v7gZF8dxL3NZVVXurjDZ
      J8mQHA/yhuT3eu2DqqpwcnLSi32Q+/xSE9GEz8sCp6tF72aYJIpxPJ722l8VuWNiRy9jYC1w
      6fwFLFZLFEWBKIoc3eumRmhCVO1Wk4RhiEcuPqTGSc8XcyRJl6OUP6efT3/60/jABz7gxncf
      Dz0IWGtxupijyAucvnMV43MBbHAPb72+xn8ZFPjxx9+LqCxLr3MWN0f2SWYJ/LSztbZ37ai2
      MPMtkiRzcSJ1DlUGp4sFWtsibGqM0r7Equu6y0GJTR3GbBy2QqRJgixN3c4Px4PUM3lv0pWk
      cdwdnOV57jKX8d0X+l5K56FDGQ0oHbrUuvu0dN3UOFktejSMwghH44mIACt6zE91nD97DvFG
      I6ZpinWe497JfVR1tTVfN7FYURji4rkL3WUb2nWzxmA2nXn7uFqt8Oyzz7qyf9bMb61FXuSI
      ghDnLj+CPP8ixqP3oXna4qUvvI38j//h9iDMt/V0yNqAgC+06qZGyU4NwyboclcGgbvhfV+n
      tffyd5okePjiJdRNjdt373RZ3NoWUbR1366bBmVZYJRmGKUZ7t6/h/FohCjs3IxJcsr+8oXl
      fD53OXrSNMVkMkGWZc5M2UeXB6HhNgbgcHBa3ARI4xjFJnNaGAQ4M5nuuFM3Ck7jbIS6qlEW
      nVBM0xTj0QhxHOHG7Vs9oZalGWaTiUtwO4SXD27fvo2HH354b7kHhbruEgMHQYC2btC0Nb74
      yX+BW1d+D9/6Iz+Na7/+a/ihxW18w8de7K8BfLsEMruAXLByVUjPG9s/CW2tRbORIsUm/jSL
      d68m1WzboYWoMcZJy4vnL6Aoyq0TmOnWClEQoKprpEmKpqkRBN0WajcZQ3eriNRIxhh3racx
      XUJbWr/Q+mA8HrttXA3HB5X+xhgUReHakhNeW1vIMrPRBMAKVV3h/yvuW34kSc77fpHPeld1
      9zx6une4szPiimtxLYiAZUMEDNCSdbBsCyKkgy46+Q/QwQfffPJFF594MuyLARP2QZAPtmHo
      YEkGCXtBUyZskRQpDneWPTszPT3dXY+sfGf4EPlFfRUVmVXdU2N9wGC68hkR+cX3fkz6q64p
      5nP4OjtCGQJyS6wOhZVk2SrAbtDrode9GVej90opdaabWfSr7T4+/rbriPNcX1/j5ff/L77z
      R/8eX/nHX8Ox+3dRpA4+/dM/Ru/nuvjOebJeHr3JlswtNxwZ22z0QgjAsJDwxaeAsyYKz4+b
      loGmeJTAD3S4A21cz/WQpKlW0GbRQmcvucIBJKyiAI2BJwKRAi+EwHK5hOM4miOYOaw0336/
      fyvLD7BbLVS91lh9H0c46PgB+mEXbl0lOi8LuM5mWXQCz/W0btPtdjdKON49vINouUScxFgs
      Ix1ceFvKnaYpjo6Otl4npaoDmhc5qkoiqMNb2tYmipfa6HH60S8gGPxDdO+8wsHBb+HbVxG+
      +wu/jNfv/W9k558oM6itOCwHWmSbHNpUutBsd8/Bd70Nlz6HqpZRc6ZsVrJCWuRIigyltFuP
      klTJ5RkrHqVEilx/UAHF6gFVQpyLP02bj3M5vkbL5RJlWepEi7X515vjJmEPAHTX+jawKcK0
      WbV+xCxbVW0FS2rzZl6qfFwy/dJ7yVLF/TUcet0uBvWGni3ma73IdgUiZM+ePdtIe2y6frlc
      4mo6xfXsGm+uLzGfzxvFyrIs1dwdF5CAG4QYn4Tw/RMIEeAb55f45Ku/ClRvcNI7WVWFkAa1
      tg3avLYNeBYTRy7XcdEJwrXjnMIXZYk4jVGUpW74kJdF3UKpeVNVVYXXl28AIbQtWkAgq72B
      ge8jThMM+soS4or1EIK2efPNZJ5fLBaa0nMg0ecmFJJCQkzg34aebeoq/L2b3FQVQpdQ5tGs
      yOHVUaWhH6hMrbq1aptTVAjljb1/dBdhEFg5W1WpPmU2wki/F4uFNejNNu8oUs/yWIxWWpul
      m8RBr07NpD7Jvd5X8NL7Cv7DxRxneYCvR+f49f9xhL/R+3BVG7RNITUpJP+7yWHlsAHTPWSH
      Nt9Bf2dFXlsn6gmx+yejsTWNjmAeLVRjaz5ORyizneMiqYPtHty9j8PxATphR1NzW4yTyQXo
      OvMYIS2l3BH0+/2dRJi1Oczna8ovmT/pb64j2cZrbmIS1zzXU/Z/QDvCSNR1hINBr4/A91Wz
      uy1eaiGUp/z+nXuN32MeLfDq4ryxgO7z588buQy/No5jvR6u42CZJojTVPcm488kIH8THVPX
      +fiTWYF/cXaJ86LEd46e4JN/8Bv40zff2iyMtS9t3BHKY+gIASEcCIH6/+biSaZ7nbiI57jI
      8hxRvGy813EchLWjSUoJ31MUP/QDdDtdzBYzHI4n6Hd7WC6X6NU1OalGf1NyvE3O5RTZcRyk
      aYput7vW+/emog+gImSXy+UGcWgTU7X1x5LKydc6K3JUUiKs+wKUVampKlFTm0f1puA4Du4e
      3tF9yQjo7+VyiaOjo40NzEFKqZ2PtP6O4yD0A+3boEwvPmfyKlNeCSfOv3d3hKdJju9GCaTj
      4PPhCf529qubVSGI6myr9b6NfQFYcy7xwVZVhSRP0Q27gEHR6Brf9RDWXsuyKpHESt6Olipo
      Lc0ydOoKBJ7napYrhIoIzYscSZpgPBwpubcocDQ5RJIkutwIhT04joMoijb6dvH/bRuBxstF
      nZva+zk0KZXk1aZr+Lv5feYa8nsCP0BZlTiaHGgqn6apFrluqqi3geu6OJwcWM9lWaarPjcB
      eePNDd3v9CAh0e12NYHhnNitY744ntF6fC/O8B8vF/jmhw/wpa6PWXKMnz39cKUD8A++Dfl3
      haZNUtUpi4JdV0kViky/1wK66kWI00Q32HZdF3EaY5nEWNYf0XEcoGbrcZIgDAJUVYXZYo5h
      f4DA99eoEi2W4zgYDodr8ShtG5yfM5XGXQiDDWgctk22zQlG2Wc2sY2e7TkuOn6IKIo0deTJ
      SKa3/23BJp4VRYFXr15pj7gVN6pKIz/f2J7n4WAywd2jOxsedVq7six12XhTXLwqKrgC+GSR
      oATwV6/m+NZ5qsqi2KhK22LvugB8gHxCbl3nhptdlQMnQJHGa7Iv3U+9cLXcjrpXrZF6WFSl
      jmT03BC+50NWS4wGQwR+gHkyX6O0i8VCiy+9nsoi4oqoaQDgH8pxnBsrujaQUuJqeq2omFgP
      R+GEqYlDmFYhQgjzHP2ez+c6KpVinXhE7rsAkukfPXrUes1yuVwrBAys2kPZRNGyLPX4OaHg
      JnvHcfDPP7vAh50Af/hmjl/uhvjGn32KZV5tJsVv08rpQ/Dd1XQtPc9Uns18W/6ROkEIl+kK
      TZYEm3JaFAUcVzm9At9Ht9PFPFqg3+thPBytyZT8WbTog8FARxcuFosNwsBFPyHErRRdGyRp
      isVyxfIDz1+rs09jADZ7gdmQ1tQh+NrRPfP5HMO6ZMhgMMB8Pt+b/seB48rz58/XQh9swP0u
      YRi2cotkcQ3xs28jv/tLKJxwQyyk955lBX7/5AC/PunhwHXwx3/5Bn/xcoF/+fWPlB9gVzAR
      eVfgGjv/3/Zcss2biOq5HnrGYhBSSvVDRXdCIMsyBL4SS/I8w2Q4RugHG10H+XPyPMdsNlMm
      N8/DaDRaizHnliIppbbxvy3SqDzV6411sMnxnLLTMSHWPfW7jIdvAmq1NBwO9zIfDvw7X11d
      4fT0tDXMXQiBTqeD8XiM8XisObKN8kspIcscbnwOUeUbBJM6z8TxJ/h3Z5/gT6YRJk6CUko8
      v07xz/7+Y3z18WRlBr0p++PIYO46Os93IT/G76f7bIq1pljGGImLkNXCd11dFSLNMnieC9cR
      mC3m6HZ7GI9GSFlCfBNQzA+JWtTB0KS0+xJ9AGC+WGjHHaAciNx4wP/na0LHue5g45htIq6U
      yo+RJKp5dlO/3tuAaQFqC7rkIMQqtKXpuRQr1RndQfrzv4PCZwF3Qpm/o+i/oyxfo3Qf4H8l
      AxyIOa6v/xP+6/ef4Rt/9gwfnwzhCmwqwdsmYhswgakgmx+qyYJhHiME18+ujyd1uAE9qxuq
      lkLCWXUuoXTHvCiQ5RkOxxP4rrdhXzc3Iv2mTUCUcTAYbNis9yX65EWunX0EgeetITkBF3tu
      C+aak7gRx7EuR7gPMHGmKApcXV1tFKlqApM48mfleY48z3VUrqlHsfGEAAAY3ElEQVS7CAjl
      AXYncJwQf57dw/9JR/ide+9hPP41/OfvR/jah4f40n3luNz6FeljbDPvSRJBDPnTJjZxMxV/
      R9NiTEZjeAZVCPwAaZZpzb8oCpRlicD30QmVrbvf7eFgNLHG6TR9bBpHFEVYLpcAlBI2GAy0
      XLoPSllVFV6/eaO6t3N9RjhrFL0NbPqMiWA8YYfeS9eT5YfEn32AzWAQxzEeP35842eZ4l+S
      JDr6ljrnmAYWuqfb/ZtwnDH+avZD/O5kgV8adPHN7yY4n+f4g9/8kiaqW5NT6UNQ+ZFtk9+F
      k5DcapPFbfJ/URR1Dm+5VupksYwUy3QcwPMwnc8QBgHyOvXx9PgBXMdBYsTWmAtrinP0m7LA
      +nXYL7HmfYg+ZbVZAkYIgaws0Glh/3z85nESh0xdga+prVYOiYc3zVW2jYH/JtH27OwMH330
      UeO1uzyb2kQRLnJ8NLk4zTWDwAM3wm8MS/zg85/gX3/7Av/kqw8BFvy4VhbFBrTY1Jmb7zhz
      ALsghmkBMrkELRqfSJ7nquy2syp+VVYlc34py4/veXAd5QzpdjqYjMbWmBFzwcxNx4GUY+oU
      vw/RB1BVLO4d3dFBga7j6OC1NG8nNk1GBF6qhIA7COlafr7X620ULLgNcLzg/66vr/H+++9v
      va7tn8r6S63fSEqJoirXCAoRqUUl8W/nT3BZdvA/n/4QUVbiVz6YaPzyfX+VD9CmdNDC8WMU
      M75rnUvTLm2jGPxac7LLZQRAIstzxEkMr+66XhQFirJAnMTodrrohh28ub7E6f0HcIWDrGV8
      PN3QlgtBUFWqSyNxgn1BVVV1RGZdAqZGzpw56AhoPWwhG8CKq9K8+Bz5dRx4E+63of424kfv
      S5IE4/H47XSYllsomd8Vjg6yBIBSAt88n+H3Tw7wpd59TE9n+Ke/luDhpAMagud5igOYcqI5
      OZPq06KafW3bOAk/x//nkZht1caqsoKAQJopeb6oWXdZqjAHIQQ6QQBAyf5Hk0NdcaJpDHw+
      /G+bRYXYMA+0ehvgcUiOEDruSeUwuBtEwvxtI0ym7mDKx9R9nsAsSLYvoHdOp9M15+Vtn5Wl
      qsyNbfMIAe1E5Zz9Ly5j/KufXWJWF8j9O4/G+O1fvAfPXS/utdO25w9ep8pL9Pt9HV9DsEt+
      AU2OwLzW/MBCCHiui27YUXHttQLneR7i6TU6YQdBEMKr41AE1mNo6Jk2xOL/03VmOUc6Fscx
      yrLUNuqbAiEHNb22rYdtrZtENK+2GhEnblOgi6JAr9dTXLMo0O12tRNwOBzuRbcx4cGDB3pO
      t33+YDDAdDq1Fht2HRfdYNPrfWcc4mu9Kf6W04MQymTd7/fheZ7elFEUbW4AE/E40tg+ymKx
      0IvapKQ1gU35tL2HwBEOunUY8zxaIAxCFGVtsx8M4HsefM/HoNdHtIha37cNbHExFHZBdUwp
      kO4mQNYLU3TcRR+xyf5kkqUoVG6Ji6Jozf9B76awD7IANXWfvw1wrvPZZ5/hy1/+8lshP61H
      m7jNRUNao1Pfxb8Jf4g8AeLBfe234TVowzBcVYYjMLuh0KQ4pTSdVl5dbbepujOfyLbJ8l1u
      k4MlgGUdBNfv9nBx9Qa9bg+DnrLrHo4PkNVmUf5em/xM502wiR6m0kzzvinlXCwWG8XAbNzP
      NnfbOKnYls03UVWV9m6b4pPneej1eto2vy+gsb9+/RoHBwd7s5ylaYooivRGaPom/FsTEfPr
      tkxkDqcNYBWBaOFtD26idmVZatv4NiXXpPI2kYTED3NS9Q90gw4814OExJ2DI31u0OujrNn7
      xn1oD+SziUX8nG3+N1WIyYNJH9B17WEfNrCdp7UiRO90OjpflojYeDzWYc+coBE38DwP3W53
      L7kA9GwppfYu7wOkVKbPXq+HJEkgHAd5lsGrEZzSPH3Xg+vWtaEYwSPkN6WLqqo28wFo13AZ
      2EREG6WhTUDslCOMTZ5v4xS29/K+WgJA6PkoZYXKqYBaPwj9QEdy2jZg2wdu4hD8PAfK+d2G
      NFJKXeVBZzc1dNbcBZquJYSm7ie0GYQQOm6J+g5zAke5EUEQ6FKQt90I9MzpdKo39z6oPyUY
      BUEAz/NweX21ZhiqpOoQlBY5RFEAdUvZXthBEJ3B/8knSJ98fWOcQojmaFAelWfuGhvlzrIM
      3W5Xb4Y2q4VJ8ZosP5xLcM5A17pwEHi+zsSK41ize9OsaRPdzHE1iUM2EWXXKm9VVa2FGdA4
      mt7ZtBa28doIi5RSIzUv6EXxS2EYIo5jLQvTvRRS7Pu+tu7dBnHpm927d+/G9zaBEKoKB0kZ
      4+EIUbxEkec6rF5KqatAK7NojV/hGMX4sTIXbXBXuYoFMl9o+81ZqO0jcgXDRjHNj8ufZ5s0
      fw/v68SBsofM9DlzYxEi2+bWxplsSOB53s7ij6lgmpu6DVzXxWg00hlQrsU8ao6VRCIplQc9
      iiJMp1NNHEhfGI/HGyEdpODPZjMsl8sbJT/R3IqiwNnZ2V695nzO5IwcDYYIwhBlVcL3fHiu
      p5L7PR/9sIugFgWd/h0kd38RZXmhnwUofEySP1+FQ5sJKOYxutlxLF3/ajCVLf5s2zOblBj6
      nz4m/bZxFPrf932d3cQ3Dr/XfIY5/l3hJjU+eZrlTcOWSawhS04YhhiPxzg8PMRgMNBKrKlL
      mM8m7jidTrXvgUK+KeybgJ5DXGJXoHWkig/7Bsr4AmoPrudh2B8oLheG6He6CPxAc7XAD9Dp
      dOoyMxeYzf4bgFyPtapmiOMfqNKITfIxsX5T7OHX8mPUAMOUw03qbxN7zI0ArGzcJpgbRwhl
      DuSZXLaMKJuy2aT88nXhYpDneTsHw5E4Yo7JBNNvYhIVQHHXoizguC4m47HmQLTpiViQrsFN
      hvx5xC3JJu77PkajEbIs0z4OWoubBP3RO66vr7Xnd59ARck4JInq89DpdHQwJBHbfr+PLMtq
      UfAOJpN/BMBj37KLweBXVJdIUzZuEhNM5DeRk5Qp27X8WebvNipsE2XoONcHqqrSwWtE0Whe
      tCjctt8kLvF52USVbc1EzHVpsy4R2DaGOSZVLCyDzJRB4N6du2sbh0REv8575gV8uVFCCFXu
      cTqd6pxgUuh930eaplgulwjDcOdEeZojlZXfVcTbFeg7mVw9z3MMh0O9BjSPPM+1uXlFVPxa
      DSApwIHvf6BygukFTZMzFVAalHkNgLVdeBMzmI0D8HeT/ZfnAHMKzasImGNs2tw2hdKcDwfe
      dbINaCNyYrBt7qbibq6dIwRCz1eNwPMMs/kclVQJ/35d02c0WGV1UapjWZZYLpdr4oyp+FKd
      U8dRJdx5cYCbgJQSk8lk79QfgPbgUhSoDiNhJl8Aeu70N9/4m8R0BvH8+XNpduegv2lStg3A
      J03XE3LQIJs2gRnzY1LJJrGHu/tt17eNH1jv6mgTh8z7+G8AGI/HW6liURS6dF/Te815me9r
      5LQCyItCR4uaz1MBggHuHBxawzjSNEVW51CYSCqlRBAG6PX6a+1mdwGizN/73vfw8ccfa2q8
      T5BSasJCzycHrHkNmaeXyyXiOLb6tYQQmM3+i+IA/EQTNJ3fRcyx6Q1NiN5ELU2Rp+l9TdTb
      vK7p76ZjJGZsA3I4cdHSFtVp4zr8vTZlXUDodMms2AxfKKsKR4NNz7QQyr/T6/V0FQgKJOS6
      Thyrymt3D4+24oM57izL8Pjx472KPuYceOU9/n6SEMj8m2UZ+v3+hrhrrvdw+PfWrUBNm8Gm
      MNqsP0VRrIkINquLOSnzNw2Uv5MjTZsOArR7e00lk7+HIzetBbde7ZLPSvfSs9soPv1tzs9c
      a9v99NFN8D0PQdAe2uA4qh7QaDTayGv2XBeT4ehWCPzixYtW4rNP4N9tsVhoMy8pwmVZYjab
      rekA9uf4K0dYUzz8Nmpqfjzy2uV5ruNUyDlG128DG3U2Y/Z3UUSbqJE5dorpIeqRJMnafY7j
      7Gz37/f7mM1mVp2DftsIQ9N1ph4jpdQdMIuyWCvsXpYlZCWBHXRXIYQuAUM1OHfVcTjQXHzf
      1wrpu94EZB6mftNNRYVpfPS/bY0djrgc2bZBk3WDlBNaTNINiH01ISUtpIkcHOHNcZnXCiF0
      xxKbCMHnxikv2fV930ev18NwOFxr9kGe1F2A5r8NdnUy8XHSHKnuqklK8qJAku1uuweglWXy
      K9wEeWlNeXDau0R+8meQOEqZeqPRSJ/fRaymNa2qSvkB0jxDpS+qkSJYsfwmhDUHRxSat0Sl
      62hDmP13t4kITUqieZ6uaVLw6B/ZvPM8162OTKWaeoGRTGmTPW1AdvgmLsWPN+U/NK2F7XjH
      D1U1bbky6arWrzerT0pzvg1Iqbq885zfdwFSqjpGZN6l8BeKEAU2zfXmd6BK4fQ8IYTaAFVV
      rVETIVWd/rZW91yetr2Qsx7HcRpbfTYd41SvKcHGnKxJLc1rAegKcOQvaEMyCsDaBaSUOnzA
      ZsUxNytxNDPsnI/V/NtMegFUV0dflz4vdQujfVHiNqMEoL7NPpJedhkHVc8m0y5996LOCDR1
      Lh4STc29qSJ24PkKx7OygOutpzVCCKRFBtftNHZ6aXLrmwos/c8/OEGTpcRMbrB5pG1hGjaR
      yNyUN+1NtQ2klLp1Kpl/bUjN/6b3btj6G3Qcm6IOUDYUr17nAlI5iG5D0ZvExrbrX7x4caPQ
      kNsArS1146FyNZyAmPhI56qqQlGVyArlkc8KVUO0zCtAylWXSAIymQ37A8zmc3SD0Cr/Nllj
      OEU2LTc2kcAm4jRZezhHaDpPxzmFNzfGPuPUyXNqm1PbMT5uDqZlqOl6G7V1hACEsG6AXWRj
      23mquU+NACn4cDKZ4PPPP8eTJ0/e2QYgSxw31/KgR05AbQquEEJ50LN0rb8bxwdPYBOZAz9A
      v9dDWVXI0hR+wwtoQXg4gSm3m9YM/h4Tsfk1NscbPYu/j37z55ochT+XnCdv+8GklHj95kKz
      VD6+JouVaXAwRTezEbZt/G3jIciyTFvg2jY7jx8iE+Ll5SXG4zFevHiB9957DxcXF3jw4AE8
      z0O/34cQAsfHx5ByvcP7ruPcFUif444vijKg8+a6AkCZJkguLzA4eajCY7IUYRBg0B/ganq9
      8Z7GpHhiO3mRa+eLOUDiFuYgmiiLTbY15TYu9thYsrmDd1l0ih7kLvK3BXIkuUYLUpss2gRc
      jGty8t0EpJR6npT4XVWVpuLn5+cYDod4+fIlTk5O8PLlSxwfHyOKIoxGI/i+jy984QtwXVd3
      cJxMJgCw1gOt6TvuC0iup9KHZVmi0+lslLek93KOmU6vcfGjH2B4+gWkdXPELM+syA8A4ic/
      fSq9YN32ezCeYBGpSlyduiCVbZAm0jcpb20iQBubbwKbUtl2bRAEurThvoAKZjVxOFNMaxJt
      TBHQPLbrmImDEPI/ffoUDx8+xGw2w2Aw0KboXStAt3Eh21j3CUT5yWO9DUwpwHEcJFmKvCxw
      7+guojjCwhIrBlg2gGqYHKCoClWjHtsRzUapN5LZLUjLj5uizbZ30LFtG8H3/b0VsyWoqkqb
      5Exu1DYWTiwkpF5bbh5uEwvbgHKBz8/P4fs+7t+/3xq60fTcm4pb72IDkG5FEb67jMFUgrNC
      dcPkxMSGQx5fJN9VZUUcIVpNoLbBNIk02+AmC2hS0SbvNUEYhnsrYw6sqDqPm6dx7QxChSND
      rHqokbJO/Qu2PZOvNzmFhBD49NNP8fDhQy2r256xT4R9F8gPrLjZLu/nZmeOe77rQQBIi3zt
      HlMv9TxHxZBTVeJtA2ti+TSgpnM8ntu2WZpkftvktinZUkod+LXPj0Qud7I7t4HNulafgF8r
      4XQNxbXzeCOS4antp+d5a9UyOIJTGuPp6aluQLeriHgbeFfPBdS68aJh5jkTH9pEM2qbm2QZ
      JNZFdbrPA6BjS7aBEGLD6kPHTaS2DW7XDWZ7bxuy89BYCr/YZ9dDUspI8W3SdcwxbztG60ah
      FpwI0PhpTtwKUpYlnj9/jtFohFevXuH4+BgnJydrNX7eJZK+SyClnai7bSPTORMP87qPXCdY
      +Xg814Pj5HAcF52wozZYvDJb37giqs1awRe9LRnGZrkhpG7KNzCdYOb7hVDpkBTE9S6pHo95
      aQPbfMx7KGaJKjBw/eDy8hL9fh9XV1cYjUaYzWbwPE9neE0mE9y9exeDwQB37961In20jBDV
      /gnaYAKoc2g7e9WJ3hZI4aWkHJIW2vDB1B+BuhdyVWGZJugGq55hvbCrmrDXaaUc1jaAadGx
      WWhMGZ8jNRdxTJMlnSfK1u/317K4+HNtSEY2bZ4AQZTeRCA6Z8JtNwethZmJZoIpm5ucyjxH
      OdR5niOOY7x582atEQklvHe7XV2G0eYb4aB6jqmitKRjFJnqRFNJ1UVnEUWYjMZ7rwp3WyA9
      ZrlcakuVraw9B/rm/Ht3/ABJlqGSFeIsQTdYicC+6yEvNsWqG3WKb2KvNoSwXWs6zFzX1THb
      fCKmPkDHHMfBxcUFBoMBnj17hkePHuH8/FzbsH3f14jSZmK9idhCYKssZruft+fkY7dxrziO
      8ezZMzx48ABFUeDRo0drzyadgOsGNs5LIpouUiyl7jvAx8DX4eLqEofjiTad/nVuBC4GUo82
      k2CYoS8kivJxu46LThAgzlKlBBvnfU8RlCRLdeybODs7k1RZgGAX8yIfYBNHMPUEDpS8LYSw
      Fmfl8h/VgiG7+507dzbKsldVhZcvX6Lf7+Ps7AwnJye4uLjAwcEBiqJAv9/XRaLaPkTT7zRN
      dSvRtUVntnd+n8kBsizDYrHQUaiz2Qzvv//+RqKNlFLHvWRFjpKsHABcT9W+8eqO6LRO5DS6
      KWRxib/81mt8/LVTTI6Gfy1iEX07yuiaz+cbuGAzo7dx4aZMPKCWVKREmqUoJSuNuAvSt0GT
      Ytj0PGpsPBqp/r2USshNnMCqIFYcx8iyDA8fPoSUUlM74iTdbhenp6fIsgxPnjxBEASYTCYa
      Qai31I9//GOcnp7is88+w+PHjzGfz3F4eKipkLmYBFRxgSg8RYrSmkkptY5A5Qd/+tOf4vj4
      GGdnZ3j06JHOwnIcR0dQ6o9Sj5OiHQHVBSetUx9dx0G+jJB2UrhwdF3Mpm/Ax28SKtLRqhKY
      X6RIE1USZZ8m4zagtaLvmqYpOp3OmtPLFIfbRD9TNN+2SRwh0AlC5Scwk+L3MbmbPIusHOT4
      IMUQUFTT931Mp1MAwPHxMZbLpd48vMjsZKKa4dFzqOgrsGKXXH+gOJgoirTDJY5jDAYD3dM2
      TVO9iYhjmRGpVH358vJSi19lWWIymcBxmuuH8o+U57lO+JZSYpkm+iMleYqyqhD4PtJaXAzr
      SmhEMJpEviRLEXi+Rh4KlebNJghxqArd/48NUBQFZrOZVbShNTF/b3OSmjoo/998Lj++URu0
      6YYmamLe22S6ajpPzRqoXj1NJIoi+L6PKIoQBAEODw+xXC61iYynWFZVhel0ulaTNMsyrThr
      iletyiySTjEejzfGeHR0BCmlbu15fn6OwWCgCy31+328efMGp6eniOMYx8fHOjDMXBObWEUU
      kBJY6Lk0zk7NiYQQqvallIjrNE1ZVXAddydCY1aicJ310opSSl1akHI29tkr2AY8spSIUJPo
      ZROjTaML58A24Md5jouWeEgHsN3IB9DEXppkd37trkBiBkUzSqmcIkdHR41xIdusSIRUxEY5
      ZzCT5M2/twFR4CRJEGcJPOFqnYAsPHwNyrLEbDHXEaQ8O64NoR3PxdX0Wn/sftjdaY35XMqq
      guusl4RJ8wxZnmE8GMH1PIQ3SAC6LcRxrDzpVYWyKrV4R5uzDUwjRBuFp+u4UYI7Eulaa38A
      bu7jSNL0Qv57W3hCG1AQFFl0nj59ig8++EA7oWzjahMv+GIACuF4fPl4PN6Yl43DmfOllEry
      VhZ1JpbjCx3BSOKb7/t64efRqlqZZ6HitrlUskKSZGucDFhlO9nGWMkKjljvdWY+WdaWItdx
      4Xoueu84qYUgDEMsoghxluhxCAj0O+tEmLiT6aSldTCJnU3qMLmLjdPoLpG0WEmeAVBNKGxK
      qc1aZA7c9ncbm+LnqDz3j370I3zxi1/cCIiyWZ+4AstbAvFF4nIi6QjEaegZPOWQEIzEJto8
      NB6+Zqost6uRzxWu3sxkPiUIPB95WWjrDmfJHMH1+CVQFop1+66nMvQEIKXaeDaqXsoKPSOn
      26Y0CqES7MM66cmksPsEEkvJ4ucKB0XNAULWXIXGC6iWWG0iUJNYzq+34R2XUjze/7eSUjkL
      BCBLqTsXmhPhL2mbsE1E4gMwz5MSTErkfD7XsextG00IZUqlTiDkWKG52cZOmVzkbCKHlNkg
      hNv/+cK3zb9A0Xq9Mm+WcB1X26ubRE6gbuZcSpSyRFqkyKu6gC3UhuIIQKVSUpnqY+bGMr8F
      bfyqqt55euMiWgCyNhVLgaIskSNHWWw2NNwmgfBrObRxcfPc/wOcbG4jUVYu/AAAAABJRU5E
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='top pickup' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAZRElEQVR4nO3deXgV5d3/8ffMnJOzZN/JHvZVghAWWcQN1GqRVqEuVGtbbdGnWpdqF63y
      qH2qrbWLttriU6vWrSprFQFF1kAEAgFCIIGE7CHbOclZcraZ3x/B1NTW3+OlxFPm+/qLWc79
      zVzXfLhn7nvOHMUwDAMhTEr9ov8AIb5IEgBhahIAYWoSAGFqEgBhahIAYWoSAGFqEgBhahIA
      YWoSAGFqEgBhahIAYWoSAGFqEgBhahIAYWoSAGFqEgBhapbT1XA4HCYQCJyu5oX4XJy2AHi9
      XhwOB4qinK4SQnxmpy0AAFarlWNlZWhu1+ksI84Qjb1+/D3uQa15WgMAoDU3MbSh/nSXEWeA
      nS0NNFXsH9Sapz0AHzIMg2NNtZQ2tJE7JJ9Z+ZloikIgGCCiWnB1NtNtTWFMsnOw/iQRheJT
      09B0L64uPwDJQ8cTOnkEjzf8+RRQreSfPZ04p7Vv8fNp9f/DiPDKhhXcs34X7T4fK7b8nZtW
      bMIfMfjDmhXsd/k5VL2PDQ1dg/LniOiVOWwk+fnJ/cv5My8nM93++RWwOpl8yeXYY51YHY7B
      6QG6O+tZ2QIv3fA17KqCYczm4Zef5/0jFTyxq4xMVwyPjI2hrKKUeRuOM3nCbB6aN50jVWXc
      v24zhjOTRxctRGur5Nmy41T2arx67RXYNLnBNouiRbeSaA+QNayQirdeoup4gOmXn09C9nBU
      Tz2bnluOn1TmXH8j6WkODq19iYMVJ5m18Kukj8hnz7OPU9/Udy+q+9o59P56QmFjcHqA1s42
      stPysKt9J6yiWJhZmEZlIJbvFRfx6wXzAYg4M1n7vaU0V5dQ4/HywJpNXHXuPL42IoFlG3bQ
      6/dQb6TwxpIriFHl5DeT+OwCwo1lrPj104y65CriY+MonDCKLU8tY095FzPmz2bcl69Dad3P
      ztXrGLfwOuLtNvLGFrLhFw/2n/wAlrSRfOWHD3HVTx4enB4gNTGZVtcRQrqBVVUwDJ3Drd0U
      TIrn+Ef2Ky4swGZ1kuq04PN1Udcdouz4USxAcXYO0MOIIUPQZGj1jBUBbHEJQBMA9lgn7lAI
      IxykseoIQXeALr+OQ1XpaTiKu7sX39GjTBk1lARnBja/i/yYdJoPHwYNgp3NeHsjA2qE246y
      +slfEQ4bgxOAlPRCZtpLuGXFO1w+MpvahqNs9ybwbF4Kz5YG2VZTT9E/fygmhXOynGRn5JJJ
      D26rHegBOffPaCdb3Uy/8Wo8kXUQm8PQrADlLQFyLXbOmr8QR42XFMOFOxQmceRUJs6uJOms
      82jc9zqdcbGMKzRoqq4ld2Q2gaABfPzNn4o9gaGTiglHDLQHH3zwwdNxIIFAAJvNhquqiuQe
      D1NGjiVN9bOnvpms7FHcc/4M4q0q2SnxVLa6mVqYS0ZiCjmxNlRFYcSQPC4eP5Lq+lo8WgKL
      J40jzqoRH5dEYaKMFJ2JDnq66aw+RGN9B5nDRhCDl9I3/obHFySveC6u4/uw2VQ+WLWCkJZE
      Xm4c7e4IPVU7OPhBBV21lYSsqaQNSaJm5xbcLg9GOEB7Y9OAOqotjuSMdOKSU1BO18tx3W43
      CQkJ1L71d5kHEP8nL3/CPMCsWx+mftXPqGvwAeAcMp6LF81gxe+e/Uw1B20eQIjPouSP/40R
      DvYv+1oPs/rpI5+5XQmA+I+gh4IDVxg6kZD+mdsdlAAYkQAPv/Yia0904ohN5vdfX8K4pI9M
      bhgGpfu38LNDPay87nJK9m/n/o070ewJ3DzvS3xlWBq/e3sVKyrriIlL56kl1zAyPgaXq5mb
      XlrJr7+5lJzPca5EfHHs6Xlc9O2lxDtj0MO9HFrzPIeP+5k5dzxbV63r32/y9XfjK3mZyqrG
      z1RvUALQ2V5HlZLFlh/cyK7dG3j1UA3LZo39x/aOOv6y7xgW+xAgzPMl5Tz1ndsYavVw86ub
      mKDmc1zLY833FnCw+hCN7h5SAh5+9NZOfET+fWHxHye7MJf2HS+zdvMBbKl5jJmQhxGooPFY
      LaCQMW4qWZl2bDEWfIBidTJs6kxirb0c3bmT3sCne2RiUCbCOtxdZKVmY9NURuZk09TR1T84
      Feh18T8bP+D2+XOxn5rZVVWFsKET6O2l5mQ7+5sbqKyvZMnyZ/nZ9oOkxTlJSs7hqSWLGerU
      BuMQxCBpqW8hdcoC5t/0XUaOzqbqgz2ocelMmFlMyoQLOfeymYRIYHjRcACKFn2X3CwnxBVy
      /tULPvUo+aD0AIrSN/n1IfUjs7ivbfw7FV6FF3fs4kBNG++dmMK350zhzj89SUpGNopiAV0n
      r2ACz1xcTHn5+zy/v5rH5p6FnPpnnkBHI+t//2scyWkUTJnDpTcVsealTQBkjBrP4bf+SsWh
      Nmy5owAYevZUYkPZZOsqFtqxA/5PUW9QApCRnEbtjjJ6QkXsrj5GXvq4/qTOmjSLlC4PgZ5W
      trYFyY5zUFLVyqM33EJOpJk73jtMUVY6b5a5iBgGnd5ekhxywX+mKpw0jZSYHvaUlFO9q5Sx
      kxb2X6b0drsoHDYarcpHel42dTvB03qCPa//ksaWEFmFmfR+ynqDEoCE1DwuztjDpU88wZDM
      Ap5YNJQDh3eypieZH08bzbBc8LuS2eG2MCY1HmVYPne+8Ae0uAx+esUCRqbYubTubeY9/gQj
      Csfysy8P6287IyEJi8wOnzHqKo+Qe82NLL54CWFfF2VvvkQ4YuBx93Bi2xbyrr+Zq+65kC53
      K8FgmNI3/8bca+/kHKtO5bpXafiU9WQiTESNT5oIO13krRDC1CQAwtRkJlhEFUtsMlOuWExS
      nMaR91ZRW/2PiS5HxnCmXnYpNsXH/rVv0hs/gpmXnNu/van0HQ4daKTosq+Qnmrn0DtvcDKQ
      wgVXfql/n86KbZRuKu1flh5ARJXcsaOwuQ5T9v4upiz6Og7rh1s0zl74NVwV26g40MKsRV/G
      31jJzjdeYdeqlVgS0nC1nGTCV6+H5n3sfb+UyV+9Gs19om+flW8StiXjbv6nJ0MH/QiF+ASW
      MBzavIuTR/dwslMlLunUo+9WG0nOCEfL9tP4wXr8ccOICXtwtTThyJ+Ct2Id9a1+crKSsOSe
      zfRL5lK++nX8fj+uliZIGoalbQ9HjwwcJ5IAiOgSgcipgUlD11HVvulORVHAMOgbtAyj6xZU
      DbDEM2nOePZt3A6qStyQfHzVO9n82kqKFn2TOLsKWJl44bkc2LCBfx7zlHsAEV1iDJwOCy5f
      kBi7jdCp12sakQi6omGxWAhEnNg0L6EQxOaMRG2vpMsbAUuEXlcLdUeq6fEG6fFasNpULLH5
      pCjNNLV4P1ZOAiCiSrc/xAW3/ICOziDOYBXd3WHOuvgKqre8TU11O5fcegd+EvBWvEuvDtkF
      I+msrez7cNjLvq37ueA7t+HuDmN1l9PtDpM4biju+up/8eVImQgTUeTllgaaDh8gKacAu02l
      s76WYDBCck4B3S316FhIycvHQoj2ujoiuoEtMR1LuBuv98MXMSskZOXjtKu019USjhhYY5Ox
      W4L0uKUHENHO0HE11AxY1dV44tS/gnTUVg/YFnC3MfAd5AbdzSfo/siakLeL0L8pJzfBwtQk
      AMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC
      1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC1CQAwtQk
      AMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLUJADC1CQAwtQkAMLU5Jfi
      RdTQUpOxjh4+qDUlACJqlCXXsjZ+86DWlEsgEVXsmh2npgGgKBbSnBlYlc/erqJYsCgfb0gC
      IKLKzJyZXJaZC8C80f/FjyYuxqZ89tN0/ujvURQf+7H1cgkkoo6iWLlo9O1cGO/hwdL/xaMb
      jMqYy2X5U2np3MuK2vcZkX4uwxNziQ3XsbaplitHfwVnpJ3Xj75OW1jjgqELmZSSQ4f7ECvr
      y1kw7CK6HC1UHljNrMKvMDExlZ0n1kgPIKLP7OHf5r6Jl/BixUv06DqJcUXcW3QVHzRsJj1z
      ATcUFjMi80JmxGvsbKtjafGduLp2U+mDpROuJjVuBHlWPxtqNzG+8EYmOULU9LRQ3lZO8dAb
      uTg1gS1NB7hh6jLpAUQUClSxdOs27p56N3dtfYQhieM43rKObS0fUOmP5Z4x4znZG2BH3WaO
      Bwwmp47hrISlALhcuzEiPSTET+QbQy5gbEImm61W2nrd1PfUMTFnBK8ffYTSrjYyMy6SHkBE
      n631Gznc8nfWuWK4bfzluHx1FKROJ8uezMz82XR012NggAGEXZzw1vNUyQ+5Y8syVp3Yzlm5
      C0kOVvCH8j9T4+8BFEAh1hpHg7eNc7OmkeLIY3ZGgQRARJfO3k5aA72AwYqDj9PjmExK8CAv
      1h/jvtn/w0RLE3+sep+TPTW0hfygu/nV7mdYMPFefjrlW3j8LexteBstcQ63FV1DbVspAUNj
      b/MOvjzqOkqql+NyTuWRmT/gQNWTKIZhGKfjQNxuNwkJCdS+9XeGNtSfjhLiDPOjuEOsDcs8
      gBCDRgIgTE1GgURUiXPkclfxPeTbLayu+AOrGg/0b8tKns5dZ99IPF6eK3uckq4mvj7l51yQ
      lgkEeWrHvRwzcri7+BZSFQ/P7H2cMvdJJuV+lZvGfIkezwEe3/172sKh/jalBxBRpThtJHV1
      f+bObY8zf+zNZFg+fHzBypLx17G2/Ocs27eGGyZejxUHExKs3L3xZm7ecCt7enqYN+xS3jnw
      KA+Wv8utRUtwOMZx8/AJ/HTzbbzTEeDC7HED6kkARFRRIwpbmg/j9h+j2hshxR7ft16zka4G
      Kes6QVPnVrq0fFJjRzE2MZdHLvwT/118E0kWldfKf8n+gIPFw89jX/Nu8tPORtE1ls19kisy
      EtncXDmw3hdxkEL8WwZETo1L6oaOduoUVVAAo2/8nwi6oeGgnV/ufJhb13+TdS471xRO6dvX
      CFHVcYix2ReQbU8gXvPxo03f4YXGNr41+qIB5SQAIqpELAbz8yeTlTCeUbEW2nu7cVrjMPQA
      LZEYZqWPZUTGfFIiNYTtozlvyHgSbUmk2ePoCvj51pQHOMthsLtlF4Y1nYaOMiJaEkm2BJJs
      cXQHewbUk5tgEVV2tx9lxqTb+HG+hTWHfk9rWGHp5Ft4/eBveenQC9w68Wbm42X5/t9R7+5k
      f+ZSHpz1IJVN63m2oZzYrhBLi5ZylSXCK2WPUtVZx2+P5nD7tAfodO/lD+U7BtSTiTARNWQi
      TIhBJgEQpiYBEKYmARCmJgEQpiYBEKYmARCmJgEQpiYBEKYmARCmJgEQpiYBEKYmARCmJgEQ
      piYBEKYmARCmJgEQpiZfiRRRw6nEkqFmDGpNCYCIGufGXMgcy+JBrSkBEFFDxYKmOAa1pgRA
      RJUdG5/hufWbCIZCxFhjyBk3jwe+8c1/u3/D4fW8W+/ghvlz/k/t93pa+dubz1By+AgJacMl
      ACK6zLzoO0ydsYBH/vIs9y+9D02FjtbjqPE5JDst1Bw/SnbhWHRfO0dqajA8HbR3JwIGrU1V
      NHT0MGLEWSQ6YqhvrKLX5yUxcxQZCU4gzCsvPEbcpGv47ZL7aK8vlVEgEf32bHmJ8qZOIMDL
      L/6WTl8nj//mR2zes53X31lFGDhevpbH/vw0pXve4aHfPESHP8Kfl/+A1dveo9N/6mW4vkYO
      elO5YkYxFlVlSMEM6QHEfx53/V7UoRdz+7VXcXT3K6ypNSjZvo3F1/+Y6XlprHxhGeX1Ldgc
      6dxwzR2k2U+9YFfXQbOifeTngqUHENFP0fH6ewn6unD5Qmgxdnw9HQTDEbq7O4kADocVl9uN
      HgnS5fFgt1rRNBvaR8/22ByGKo3sOlaPbhj4uhukBxDRb9SYYn723A/ZkVcEdojPnso461vc
      /sBNZCbaiR1WyNx5V/HL5Q+xOqCTO2ouV+els/2fG1Ji+Nqib/Dk8w/zV08vhmqVVyOK6LE1
      dTSadQiGYRDRI2iqBUWhbzkSBkVFwUBVLYBOOBJBVVUwFDRNIRKJoOsGmsWCqihEImHUU230
      Mwx0QycSiaComvQAIvooioJFswxctlj/aS8Vq2XgFbymWdC0gcv/onFURUNVtVOtCGFi0gOI
      qKKH/ZSUvE2dO8ScmV8iNyW+f1vQ18H729+hx0jg/NnzSHHa2LtzFRVN7UAM5194JekxvWzZ
      vp7OkI0Lzr2UNKeNyvIN7D7Wdxk+fdaVjMxM6m9TegARVfbv28m7R0+Sag/y6z/+Cl/k1AYj
      wqq/PU51t4LmqeQ3L7+KToSNW9aRNqSAvOw87Badvz7/c+r9VuKMVn7xzFP06jrvb1tHYmoe
      edkFxNoGXkpJDyCiSrfqZMmiGxiWYKe6+l5a3H6GpTjQw71UdevcevViEmOCHH7sPrr959Hq
      ceBqPY4lr5gEu4OrrruP2Nh4FN3D3gMPEYj4ONnpJbGrHiVtFClxA581kh5ARJcYBbumAgo2
      i5VgOAyAYegogKZqoDiIsfjxujzkjRxNYeF46ve9wcaDNcTHJaAYIdavXs7YudcSF+kmNXsc
      +flj8NZt5s0deweUkx5ARJeAji8UAQwC4SA2a98li6poYCiEIxHQAgTDsdjis/j6wiWkxseS
      bjTxblMzwVEprFj5J8iazaLpRRghL4uu/AYZSYl0JAV4rvQEUNxfTgIgokoSXpY//zum5MVS
      7YonMz6GD8q2MHbcDMakaDzz6p/IUloIZEzC5jnOT5e/zNxp0zhyaBcXLLyTV/9yP/t7czg3
      rZkN29/jnHFD+cXvfsU5M+ZSV1XKxPOWDqgnE2EiamxNHY2qpVK+fzON7hDTp11IisPC7n3b
      GDtuJg6ll9I9m/EY8cyaOgunVaO9uZLSiiOMGj+LYenx7Nz1Dh3eIAAxjmTmzLiAsPsEJfvL
      yB0+jXH5OQMmxiQAImp8OBM8mOQmWJiaBECYmgRAmJoEQJiaBECYmgRAmJoEQJiaBECYmgRA
      mJoEQJiaBECYmgRAmJoEQJiaBECYmgRAmJoEQJiafCVSRA29sw7dfWRQa0oARNRw7isl7r1N
      g1pTLoGEqUkARFSJnTOT3EfuQDl1ZqoFkyl44Wmsac7TUk8ugURUUW1OtIJROIam4DvWSez8
      +SgRQLVgn1xM8OA+dMNJbPFwvOUNOEfnoKanE2qqR1Hi0ex+fJUtxJ4zDVUJ4t2+Fa3gLIym
      CkKdPqyjJkL7cUKdnr56X+zhCvFxvpIyYudMBXsazjQ//pYgoJFw9XVYYm3gyCL1psUoaSPJ
      WnYPMWkOHHOuJP0bC1AsVpJvug17biq2KfPIuut6lNQRpCy6CLCSfPNNKAT7a0kARNQJHStD
      G3421jFnEzpa9sn7lm+l86+riURi6Fm5HM+OMjwb3saIy8Q2qgBrdgaB0o1oE+ZgHV6ExXuY
      YKcEQEQzbzu9LgepC6bi27n/H+tVG5ZEJ5aCAlSt79Q1wqH+zUYoBJZMMu+7hUDJRlyrNmGg
      gr+d7tJWMu/+Nr6N6weUkgCIqGKEQhihCJ53S4hJDBFo7kH3eUEP4tn0ARm/fJL0y6YR6vGA
      Hkb3B/o+F/BjhHUId+E/3EnaXfeSfPlUjHDfL8H43nkLa14Cnn11A+rJm+FE1Phg/4HTMg+g
      Jg4hbuG1OFMaaXni1YHbPvdqQkSbGAea0Uzbn9782CYZBhVnPL2thq7na/7lNgmAiCqKM4nE
      a68jJtFCz5rX8B9t7t+mZg4lefFCVMWL+5VXCJ7s7vtMfBaJ8yfheuNt1IxCkhYvxGIN4X71
      RQJNbqyji0m87Hz0pgpcb7yNHtL/0eagH6EQn8A5fTL22C48e2tIu+du1P6f9NJIXvp9OFlJ
      b7NKxu1f71ut2kn53p0kzp+JotpIu+se9LpyvIe7yPjp3aiJuWTccT3+HZtQR88jaf7ZA+pJ
      DyCiihpR6HpuBQG3n7j587FmxBNo7AGbA1uyTsvqdeh+K/EX/RZLDNiv/DZ6xVZCWVNBD3Dy
      3lv6GopJJWnhFGxTZmM0VeE87xKM+m24Nu4bWO8LOEYh/r2wgq73DUwaYR3lw1++VhTAAN0A
      ghi6BevkecQPDdGz4zCKZkGxnvr/PCaWlO9/H8+LyyE2GdvIYXjeepOwfSwpC2cNKCcBENHF
      pmNxnvoVd0cMeqC3b30kgoHWd5JriaiaF2vhcCwjppH92AM4i84h+bKZKCm5pP/kfvS9K3Fv
      O0zE1UXwYCn+8go820uwZuUMKCeXQCKqhAJhMpYtw1/nJ0apIdQeJP6KK/FuXIuvys2Q+39C
      2EhDr9hK9yuv0f3K0yj2HLJ+8V061+wi/fHnsFtqMEZOJWXIUNxr38W44RdkfD8Vbfh4vH95
      bEA9CYCIKr07S2j1+bHEWegs240RMQjV1mCEwrj/+CjBSUWoSi++vf+4ljeC7XQ8/QIGOj0v
      PYXXcerCpteD7mmj+Y67cUwcQ2TNCgLHGgfUk5lgETVO10zwJ5F7AGFqEgBhahIAYWoSAGFq
      EgBhahIAYWoSAGFqEgBhahIAYWqn/VGIHs1Cjd1+usuIM4A3O5tQ8ZRBrfn/AF08kEU/AJ9h
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='top dropoff' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='mph' width='192'>
      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
      3kNHAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='tip' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='payment' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
