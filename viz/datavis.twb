<?xml version='1.0' encoding='utf-8' ?>

<workbook source-platform='win' version='8.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8300.14.1117.2230                                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource caption='new_trip_data_1_5' inline='true' name='textscan.41980.593389085647' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='new_trip_data_1_5.csv'>
        <relation name='new_trip_data_1_5#csv' table='[new_trip_data_1_5#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='medallion' ordinal='0' />
            <column datatype='string' name='hack_license' ordinal='1' />
            <column datatype='string' name='vendor_id' ordinal='2' />
            <column datatype='integer' name='rate_code' ordinal='3' />
            <column datatype='string' name='store_and_fwd_flag' ordinal='4' />
            <column datatype='datetime' name='pickup_datetime' ordinal='5' />
            <column datatype='datetime' name='dropoff_datetime' ordinal='6' />
            <column datatype='integer' name='passenger_count' ordinal='7' />
            <column datatype='integer' name='trip_time_in_secs' ordinal='8' />
            <column datatype='real' name='trip_distance' ordinal='9' />
            <column datatype='real' name='pickup_longitude' ordinal='10' />
            <column datatype='real' name='pickup_latitude' ordinal='11' />
            <column datatype='real' name='dropoff_longitude' ordinal='12' />
            <column datatype='real' name='dropoff_latitude' ordinal='13' />
            <column datatype='integer' name='pickup_postcode' ordinal='14' />
            <column datatype='string' name='pickup_neighborhood' ordinal='15' />
            <column datatype='integer' name='pickup_hour' ordinal='16' />
            <column datatype='integer' name='dropoff_postcode' ordinal='17' />
            <column datatype='string' name='dropoff_neighborhood' ordinal='18' />
            <column datatype='string' name='dropoff_hour' ordinal='19' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>medallion</remote-name>
            <remote-type>129</remote-type>
            <local-name>[medallion]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>medallion</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hack_license</remote-name>
            <remote-type>129</remote-type>
            <local-name>[hack_license]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>hack_license</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>vendor_id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[vendor_id]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>vendor_id</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rate_code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[rate_code]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>rate_code</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>store_and_fwd_flag</remote-name>
            <remote-type>129</remote-type>
            <local-name>[store_and_fwd_flag]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>store_and_fwd_flag</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_datetime</remote-name>
            <remote-type>135</remote-type>
            <local-name>[pickup_datetime]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_datetime</remote-alias>
            <ordinal>5</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_datetime</remote-name>
            <remote-type>135</remote-type>
            <local-name>[dropoff_datetime]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_datetime</remote-alias>
            <ordinal>6</ordinal>
            <local-type>datetime</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;datetime&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>passenger_count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[passenger_count]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>passenger_count</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_time_in_secs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[trip_time_in_secs]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>trip_time_in_secs</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>trip_distance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trip_distance]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>trip_distance</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pickup_longitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_longitude</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pickup_latitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_latitude</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dropoff_longitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_longitude</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dropoff_latitude]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_latitude</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_postcode</remote-name>
            <remote-type>20</remote-type>
            <local-name>[pickup_postcode]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_postcode</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[pickup_neighborhood]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_neighborhood</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>pickup_hour</remote-name>
            <remote-type>20</remote-type>
            <local-name>[pickup_hour]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>pickup_hour</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_postcode</remote-name>
            <remote-type>20</remote-type>
            <local-name>[dropoff_postcode]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_postcode</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[dropoff_neighborhood]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_neighborhood</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dropoff_hour</remote-name>
            <remote-type>129</remote-type>
            <local-name>[dropoff_hour]</local-name>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias>dropoff_hour</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[new_trip_data_1_5#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Dropoff Datetime' datatype='datetime' name='[dropoff_datetime]' role='dimension' type='ordinal'>
      </column>
      <column caption='Dropoff Hour' datatype='string' name='[dropoff_hour]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' caption='Dropoff Latitude' datatype='real' name='[dropoff_latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Dropoff Longitude' datatype='real' name='[dropoff_longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Dropoff Neighborhood' datatype='string' name='[dropoff_neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Dropoff Postcode' datatype='integer' default-format='*00000' name='[dropoff_postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal'>
      </column>
      <column caption='Hack License' datatype='string' name='[hack_license]' role='dimension' type='nominal'>
      </column>
      <column caption='Medallion' datatype='string' name='[medallion]' role='dimension' type='nominal'>
      </column>
      <column caption='Passenger Count' datatype='integer' name='[passenger_count]' role='measure' type='quantitative'>
      </column>
      <column caption='Pickup Datetime' datatype='datetime' name='[pickup_datetime]' role='dimension' type='ordinal'>
      </column>
      <column caption='Pickup Hour' datatype='integer' name='[pickup_hour]' role='measure' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Pickup Latitude' datatype='real' name='[pickup_latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Pickup Longitude' datatype='real' name='[pickup_longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Pickup Neighborhood' datatype='string' name='[pickup_neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Pickup Postcode' datatype='integer' default-format='*00000' name='[pickup_postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal'>
      </column>
      <column caption='Rate Code' datatype='integer' name='[rate_code]' role='dimension' type='ordinal'>
      </column>
      <column caption='Store And Fwd Flag' datatype='string' name='[store_and_fwd_flag]' role='dimension' type='nominal'>
      </column>
      <column caption='Trip Distance' datatype='real' name='[trip_distance]' role='measure' type='quantitative'>
      </column>
      <column caption='Trip Time In Secs' datatype='integer' name='[trip_time_in_secs]' role='measure' type='quantitative'>
      </column>
      <column caption='Vendor Id' datatype='string' name='[vendor_id]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[pickup_latitude]' derivation='None' name='[none:pickup_latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[pickup_longitude]' derivation='None' name='[none:pickup_longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[pickup_neighborhood]' derivation='None' name='[none:pickup_neighborhood:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Pickup Latitude,Pickup Longitude)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:pickup_latitude:qk]' />
          <groupfilter function='level-members' level='[none:pickup_longitude:qk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:pickup_neighborhood:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Cobble Hill Historic District&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Fresh Pond Junction&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Koreatown&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Park West Village&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Tremont&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Corona&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Gowanus&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Lincoln Towers&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Parkville&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Tudor City&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Battery Park City&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Downtown Brooklyn&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Greenwich Village&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Lower East Side&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Rego Park&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Upper West Side&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Chinatown&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Flushing&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Kensington&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;NoHo&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Steinway&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Brooklyn Heights&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Eastchester Houses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Hillside&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Midwood&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;SoHo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Woodhaven&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Brighton Beach&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;East Harlem&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hell&apos;s Kitchen&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Melrose&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Saint George&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;West Brighton&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Bedford-Stuyvesant&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;DUMBO&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Haberman&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Manhattanville&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Richmond Hill&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Washington Heights&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Colgate Center&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Fulton Houses&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Lefrak City&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Parkchester&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Tribeca&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Adelphi&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Crown Heights&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Gowanus Houses&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Little Italy&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Port Morris&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;University Heights&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Clinton Hill&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Forest Hills Gardens&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Kings Bridge&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Ozone Park&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Sunnyside&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Brooklyn Manor&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Inwood&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Morningside Heights&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;South Slope&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Woodside&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Broad Channel&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;East Village&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;High Bridge&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Midtown West&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;San Juan Hill&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Williamsburg&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Forest Hills&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Kew Gardens&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;North Beach&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Stuyvesant Town&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Blissville&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;East Elmhurst&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hamilton Heights&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Marcy Houses&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Rose Hill&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Washington Square Village&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Cobble Hill&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Fort Greene&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Kips Bay&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Park Slope&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Sunnyside Gardens&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Bushwick&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Flatbush&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Jackson Heights&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Mott Haven&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;South Street Seaport&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Wyckoff Gardens&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Chelsea&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Flatiron&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Murray Hill&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Southbridge Towers&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Yorkville&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Alphabet City&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Diamond District&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Gravesend&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Loisaida&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Prospect Heights&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;University Village&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Boerum Hill&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;East Flatbush&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Harlem&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Maspeth&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Rosedale&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Waterside Plaza&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Astoria&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Ditmas Park&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Greenpoint&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Long Island City&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Red Hook&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Upper East Side&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='geolocator_data+' inline='true' name='textscan.41980.620562627315' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='geolocator_data.csv'>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[avg_tip_neighborhood#csv].[neighborhood]'>
              </expression>
              <expression op='[geolocator_data#csv].[neighborhood]'>
              </expression>
            </expression>
          </clause>
          <relation name='avg_tip_neighborhood#csv' table='[avg_tip_neighborhood#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='real' name='tip' ordinal='1' />
            </columns>
          </relation>
          <relation name='geolocator_data#csv' table='[geolocator_data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='real' name='longitude' ordinal='1' />
              <column datatype='real' name='latitude' ordinal='2' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[latitude]' value='[geolocator_data#csv].[latitude]' />
          <map key='[longitude]' value='[geolocator_data#csv].[longitude]' />
          <map key='[neighborhood (geolocator_data.csv)]' value='[geolocator_data#csv].[neighborhood]' />
          <map key='[neighborhood]' value='[avg_tip_neighborhood#csv].[neighborhood]' />
          <map key='[tip]' value='[avg_tip_neighborhood#csv].[tip]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood]</local-name>
            <parent-name>[avg_tip_neighborhood#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tip</remote-name>
            <remote-type>5</remote-type>
            <local-name>[tip]</local-name>
            <parent-name>[avg_tip_neighborhood#csv]</parent-name>
            <remote-alias>tip</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[avg_tip_neighborhood#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood (geolocator_data.csv)]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Neighborhood (Geolocator Data.Csv)' datatype='string' name='[neighborhood (geolocator_data.csv)]' role='dimension' type='nominal'>
      </column>
      <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Latitude,Longitude)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Latitude,Longitude,Neighborhood)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
          <groupfilter function='level-members' level='[none:neighborhood:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:neighborhood:nk]' type='palette'>
            <map to='#17becf'>
              <bucket>&quot;Bergen Beach&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Charlotte Gardens&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Douglaston&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Flushing&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Greenwich Village&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Kings Bridge&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Marcus Garvey Village&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Old Germania Heights&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Riverdale&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Steinway&quot;</bucket>
            </map>
            <map to='#17becf'>
              <bucket>&quot;Waterside Plaza&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Adelphi&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Boerum Hill&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Chinatown&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;DUMBO&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Fordham Hill&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Gun Hill Houses&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Kips Bay&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Maspeth&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Ozone Park&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Rose Hill&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;Sunnyside&quot;</bucket>
            </map>
            <map to='#1f77b4'>
              <bucket>&quot;West Farms&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Astoria&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Brighton Beach&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Clinton Hill&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;East Harlem&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Fort Hamilton&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Harlem&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Lefrak City&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Midtown West&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Parkchester&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Saint Albans&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Throgs Neck&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;Williams Bridge&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Beechhurst&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Canarsie&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Cypress Hills&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Fieldston&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Grant City&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Jackson Heights&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Long Island City&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;New Utrecht&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Rego Park&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Spencer Estates&quot;</bucket>
            </map>
            <map to='#7f7f7f'>
              <bucket>&quot;Van Nest&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Baychester Houses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Brooklyn Navy Yard&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Columbia Street Waterfront District&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Eastchester Houses&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Glen Oaks&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Hollis&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Little Neck&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Mott Haven&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Port Morris&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;SoHo&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;University Village&quot;</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>&quot;Yorkville&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Bay Terrace&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Brooklyn Heights&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Colgate Center&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Eastchester&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Fulton Houses&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Hillside&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Linden-Park&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Morris Park&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Pelham Bay&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Seagate&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Unionport&quot;</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>&quot;Woodside&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Bath Beach&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Broad Channel&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Co-Op City&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;East New York&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Fresh Meadows&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Heartland Village&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Lincoln Harbor&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Midwood&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Parkside&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Saint George&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Tremont&quot;</bucket>
            </map>
            <map to='#98df8a'>
              <bucket>&quot;Williamsburg&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Blissville&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Chelsea&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Downtown Brooklyn&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Fordham&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Grymes Hill&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Kingsbridge Heights&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Marcy Houses&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Old Town Station&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Rochdale Village&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;Stuyvesant Town&quot;</bucket>
            </map>
            <map to='#9edae5'>
              <bucket>&quot;West Brighton&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Alphabet City&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Boerum Hill Historic District&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;City Island&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Dyker Heights&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Forest Hills&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Haberman&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Koreatown&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Melrose&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Paerdegat&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Rosedale&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;Sunnyside Gardens&quot;</bucket>
            </map>
            <map to='#aec7e8'>
              <bucket>&quot;West New Brighton&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Belmont&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Cedar Manor&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Ditmas Park&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Flatiron&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Gravesend&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Kensington&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Malba&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;North Beach&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Richmond Hill&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Spuyten Duyvil&quot;</bucket>
            </map>
            <map to='#bcbd22'>
              <bucket>&quot;Washington Heights&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Bayside&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Brownsville&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Coney Island&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Eastern Parkway&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Glendale&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Howard Beach&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Locust Manor&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Murray Hill&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Prospect Heights&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;South Slope&quot;</bucket>
            </map>
            <map to='#c49c94'>
              <bucket>&quot;Upper East Side&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Baychester&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Brooklyn Manor&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;College Point&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Eastchester Heights&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Gerritsen&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Holland&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Little Italy&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Morrisania&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Pleasant Plains&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Sheepshead Bay&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;University Heights&quot;</bucket>
            </map>
            <map to='#c5b0d5'>
              <bucket>&quot;Wyckoff Gardens&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Bellaire&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Castleton Corners&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Diamond District&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Flatbush&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Grasmere&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Lower East Side&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;NoHo&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Richmond&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Springfield Gardens&quot;</bucket>
            </map>
            <map to='#c7c7c7'>
              <bucket>&quot;Wakefield&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Battery Park City&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Broadway Junction&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Cobble Hill&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;East Tremont&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Fresh Pond&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Hell&apos;s Kitchen&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Lincoln Towers&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Morningside Heights&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Parkville&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;San Juan Hill&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Tribeca&quot;</bucket>
            </map>
            <map to='#d62728'>
              <bucket>&quot;Woodhaven&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Bensonhurst&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Cedar Manor Houses&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Dongan Hills&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Flatlands&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Greenpoint&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Kew Gardens&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Manhattanville&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Oakland Gardens&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Ridgewood&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Stapleton&quot;</bucket>
            </map>
            <map to='#dbdb8d'>
              <bucket>&quot;Washington Square Village&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Bedford Park&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Bushwick&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Corona&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Edenwald Houses&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Gowanus&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Hunts Point&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Locust Point&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;New Dorp&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Queens Village&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;South Street Seaport&quot;</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>&quot;Upper West Side&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Bedford-Stuyvesant&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Cambria Heights&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Crown Heights&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Elmhurst&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Gowanus Houses&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Inwood&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Loisaida&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;New Dorp Beach&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Red Hook&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Southbridge Towers&quot;</bucket>
            </map>
            <map to='#f7b6d2'>
              <bucket>&quot;Utopia&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Annadale&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Borough Park&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;City Line&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;East Elmhurst&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Forest Hills Gardens&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Hamilton Beach&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Lambert Houses&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Middle Village&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Park Slope&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Rossville&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Terrace Heights&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Westerleigh&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Bay Ridge&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Bronxdale&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Cobble Hill Historic District&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;East Village&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Fresh Pond Junction&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;High Bridge&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Linden Hill&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Morris Heights&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Parsons Beach&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Schuylerville&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Tudor City&quot;</bucket>
            </map>
            <map to='#ff9896'>
              <bucket>&quot;Woodlawn&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Arrochar&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Breukelen Houses&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Clinton&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;East Flatbush&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Fort Greene&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Hamilton Heights&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Laurelton&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Middletown&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Park West Village&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Roy Reuther Houses&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;The Tides&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Westgate Gardens&quot;</bucket>
            </map>
            <map to='#ffbb78'>
              <bucket>&quot;Whitestone&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='payment_type_neighborhood+' inline='true' name='textscan.41980.626887754632' version='8.3'>
      <connection class='textscan' directory='C:/Users/ELin/Desktop/BigData/BigDataProject/viz' filename='payment_type_neighborhood.csv'>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[payment_type_neighborhood#csv].[neighborhood]'>
              </expression>
              <expression op='[geolocator_data#csv].[neighborhood]'>
              </expression>
            </expression>
          </clause>
          <relation name='payment_type_neighborhood#csv' table='[payment_type_neighborhood#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='string' name='payment' ordinal='1' />
              <column datatype='integer' name='number' ordinal='2' />
            </columns>
          </relation>
          <relation name='geolocator_data#csv' table='[geolocator_data#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='neighborhood' ordinal='0' />
              <column datatype='real' name='longitude' ordinal='1' />
              <column datatype='real' name='latitude' ordinal='2' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[latitude]' value='[geolocator_data#csv].[latitude]' />
          <map key='[longitude]' value='[geolocator_data#csv].[longitude]' />
          <map key='[neighborhood (geolocator_data.csv)]' value='[geolocator_data#csv].[neighborhood]' />
          <map key='[neighborhood]' value='[payment_type_neighborhood#csv].[neighborhood]' />
          <map key='[number]' value='[payment_type_neighborhood#csv].[number]' />
          <map key='[payment]' value='[payment_type_neighborhood#csv].[payment]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood]</local-name>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>payment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[payment]</local-name>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias>payment</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>number</remote-name>
            <remote-type>20</remote-type>
            <local-name>[number]</local-name>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias>number</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[payment_type_neighborhood#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>neighborhood</remote-name>
            <remote-type>129</remote-type>
            <local-name>[neighborhood (geolocator_data.csv)]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>neighborhood</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>longitude</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[latitude]</local-name>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias>latitude</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name></remote-name>
            <remote-type>0</remote-type>
            <parent-name>[geolocator_data#csv]</parent-name>
            <remote-alias></remote-alias>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column caption='Neighborhood (Geolocator Data.Csv)' datatype='string' name='[neighborhood (geolocator_data.csv)]' role='dimension' type='nominal'>
      </column>
      <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
      </column>
      <column caption='Number' datatype='integer' name='[number]' role='dimension' type='ordinal'>
      </column>
      <column caption='Payment' datatype='string' name='[payment]' role='dimension' type='nominal'>
      </column>
      <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Exclusions (Latitude,Longitude)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:latitude:qk]' />
          <groupfilter function='level-members' level='[none:longitude:qk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;[textscan.41980.626887754632].[none:latitude:qk]&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;[textscan.41980.626887754632]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='neighborhoods'>
      <table>
        <view>
          <datasources>
            <datasource caption='new_trip_data_1_5' name='textscan.41980.593389085647' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41980.593389085647'>
            <column-instance column='[pickup_latitude]' derivation='None' name='[none:pickup_latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[pickup_longitude]' derivation='None' name='[none:pickup_longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[pickup_neighborhood]' derivation='None' name='[none:pickup_neighborhood:nk]' pivot='key' type='nominal' />
            <column aggregation='Avg' caption='Pickup Latitude' datatype='real' name='[pickup_latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' caption='Pickup Longitude' datatype='real' name='[pickup_longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column caption='Pickup Neighborhood' datatype='string' name='[pickup_neighborhood]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41980.593389085647].[none:pickup_neighborhood:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:pickup_neighborhood:nk]' />
              <groupfilter function='member' level='[none:pickup_neighborhood:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.41980.593389085647].[none:pickup_neighborhood:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[textscan.41980.593389085647].[none:pickup_longitude:qk]' field-type='quantitative' max='-8211729.6179680247' min='-8264811.5445278753' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[textscan.41980.593389085647].[none:pickup_latitude:qk]' field-type='quantitative' max='4987453.1692119222' min='4959344.6133961137' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='5'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[textscan.41980.593389085647].[none:pickup_neighborhood:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='0.38381215929985046' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.41980.593389085647].[none:pickup_latitude:qk]</rows>
        <cols>[textscan.41980.593389085647].[none:pickup_longitude:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='payment'>
      <table>
        <view>
          <datasources>
            <datasource caption='payment_type_neighborhood+' name='textscan.41980.626887754632' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41980.626887754632'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
            <column-instance column='[number]' derivation='None' name='[none:number:qk]' pivot='key' type='quantitative' />
            <column-instance column='[payment]' derivation='None' name='[none:payment:nk]' pivot='key' type='nominal' />
            <column caption='Number' datatype='integer' name='[number]' role='dimension' type='ordinal'>
            </column>
            <column caption='Payment' datatype='string' name='[payment]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41980.626887754632].[Exclusions (Latitude,Longitude)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='40.873671999999999' />
                <groupfilter function='member' level='[none:longitude:qk]' member='-74.422424000000007' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.41980.626887754632].[Exclusions (Latitude,Longitude)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[textscan.41980.626887754632].[none:longitude:qk]' field-type='quantitative' max='-8216911.2853444628' min='-8248741.2731230054' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[textscan.41980.626887754632].[none:latitude:qk]' field-type='quantitative' max='4982792.0812753402' min='4965831.106999008' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[textscan.41980.626887754632].[none:payment:nk]' />
              <size column='[textscan.41980.626887754632].[none:number:qk]' />
              <lod column='[textscan.41980.626887754632].[none:neighborhood:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.41980.626887754632].[none:latitude:qk]</rows>
        <cols>[textscan.41980.626887754632].[none:longitude:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='tip'>
      <table>
        <view>
          <datasources>
            <datasource caption='geolocator_data+' name='textscan.41980.620562627315' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='textscan.41980.620562627315'>
            <column aggregation='Avg' caption='Latitude' datatype='real' name='[latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' caption='Longitude' datatype='real' name='[longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column caption='Neighborhood' datatype='string' name='[neighborhood]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[latitude]' derivation='None' name='[none:latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[longitude]' derivation='None' name='[none:longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[neighborhood]' derivation='None' name='[none:neighborhood:nk]' pivot='key' type='nominal' />
            <column-instance column='[tip]' derivation='None' name='[none:tip:qk]' pivot='key' type='quantitative' />
            <column datatype='real' name='[tip]' role='measure' type='quantitative'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.41980.620562627315].[Exclusions (Latitude,Longitude,Neighborhood)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:latitude:qk]' />
                <groupfilter function='level-members' level='[none:longitude:qk]' />
                <groupfilter function='level-members' level='[none:neighborhood:nk]' />
              </groupfilter>
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[none:latitude:qk]' member='40.873671999999999' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:longitude:qk]' member='-74.422424000000007' />
                  <groupfilter function='member' level='[none:neighborhood:nk]' member='&quot;Westgate Gardens&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.41980.620562627315].[Exclusions (Latitude,Longitude,Neighborhood)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[textscan.41980.620562627315].[none:longitude:qk]' field-type='quantitative' max='-8174546.4594563153' min='-8301866.4105704855' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[textscan.41980.620562627315].[none:latitude:qk]' field-type='quantitative' max='5000460.6519049741' min='4932616.7547996454' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[textscan.41980.620562627315].[none:tip:qk]' max='0.29999999999999999' num-steps='5' type='interpolated' />
            <encoding attr='size' field='[textscan.41980.620562627315].[none:tip:qk]' field-type='quantitative' max='0.40000000000000002' max-size='1' min='0.115162348' min-size='0' type='rangesize' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[textscan.41980.620562627315].[none:tip:qk]' />
              <lod column='[textscan.41980.620562627315].[none:neighborhood:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='size' value='0.62174075841903687' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.41980.620562627315].[none:latitude:qk]</rows>
        <cols>[textscan.41980.620562627315].[none:longitude:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='neighborhoods'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='5' param='[textscan.41980.593389085647].[none:pickup_neighborhood:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41980.593389085647].[:Measure Names]</field>
          <field>[textscan.41980.593389085647].[none:pickup_latitude:qk]</field>
          <field>[textscan.41980.593389085647].[none:pickup_longitude:qk]</field>
          <field>[textscan.41980.593389085647].[none:pickup_neighborhood:nk]</field>
          <field>[textscan.41980.593389085647].[none:trip_time_in_secs:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='tip'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[textscan.41980.620562627315].[none:tip:qk]' type='size' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41980.620562627315].[none:latitude:qk]</field>
          <field>[textscan.41980.620562627315].[none:longitude:qk]</field>
          <field>[textscan.41980.620562627315].[none:neighborhood:nk]</field>
          <field>[textscan.41980.620562627315].[none:tip:qk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='payment'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='1' param='[textscan.41980.626887754632].[none:number:qk]' type='size' />
            <card pane-specification-id='1' param='[textscan.41980.626887754632].[none:payment:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[textscan.41980.626887754632].[none:neighborhood:nk]</field>
          <field>[textscan.41980.626887754632].[none:number:ok]</field>
          <field>[textscan.41980.626887754632].[none:payment:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='neighborhoods' width='192'>
      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
      4FrXNf73P7y2NYE0lS9hn/1Ofw8Rbh+xOJH22cIAdqKeDm173+CRVCFb+5C+8DJN2/ZyHPnK
      0zs+yXxt8UU0nU6TuwSNnzHG6+bgM0186xkfP5BHru8gTQouX98pdXkU7vo+EQ7cTOTmE7l3
      01avZv4uFgs888wzO0IY6ITOb37u5jYx1tAAh5vFSXAAE5DqHHrvU7n7pDPXKpqUolw0XykY
      091VK919D4W6bVDW/mB5Au7URXcNF0XhnTB5niOOYxwdHTlnOp5NbV97+4DzwdCaJAzDQTOM
      gPo1VE7jlX3mbt3UCIxxu10+U+nOnTs9/yqCpmnw9r0lTvN6+JpUucjRVKVvbfCV2Mly0elb
      bPE2jdlGIWlhlJoq5sDXPyRVhphf6ydN/rKuYC3QWL8goMHlg0fBKRrQeQiPaTUbJpBuFTwj
      8xD9+NrpEJNJk8iyjaFvNXgQzcr5IQyCQWFx48YNHB8f7wTcW2tx7e4p/vI//CzmRbMbD0CF
      ZPqOQ5E/xDbU3kuVrLXLpT9nICkBfDA0SNQ+pcygwyNfP43Rr+Csmto9r5REVVpfeH+0m9it
      7Q5yeCp2Arqsgvdv367SvkWq1j7HMc/znQM8n7Qeut9riBc0E81a64RKGITOk8X5in0AACAA
      SURBVFaCtV0SMFr8cmjbFm/dXWIch8iiwO8KwQd4SIXLhn3mzdD7IRz4YLVtO6hSuXTiRJN+
      RlSXrCfLMiRJgjzPe+lBhuILes/QRTMZY2Bh90pW/s7FVSgMQzY9MR2nx+npqXvPx4s7gknc
      eTkpITXg7dH/XPoSTj46URmtvgflh7pp3NWo8nvir7t372K9Xqt9y/Mc77kwwv/6Yy/i8tls
      GxTPkZTIylnoKyvBZ5NK7ULv+XU2sg1uLkgJJhdrQ6rahzeZF9Za71Wf8lRTailrt16MgQmQ
      bm6l0SaL1n/tZJiCSHhKP/pOphTnkppSKw6NHae5Zub61gNaTO8+ftDq5fVJbSK1jrXWCZU4
      jNx4SYFBZvBjjz220z75TRljsDotYfNmNyCGg6bShjorJw5XyT6zRnZcEgbYzTNPnZEnp9qA
      HDpA5I1JW4i+vktcebm23TBfGLl4gCGGkMwpzR+ajBToLoFyBPGkwQTaBXWaLa2Zj/v4wTfu
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='tip' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='payment' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
